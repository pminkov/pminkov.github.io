<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Petko's Coding Blog - Python</title><link href="http://pminkov.github.io/blog/" rel="alternate"></link><link href="http://pminkov.github.io/blog/feeds/python.atom.xml" rel="self"></link><id>http://pminkov.github.io/blog/</id><updated>2016-10-31T13:56:00-07:00</updated><entry><title>Using pandas to read a table from an HTML page.</title><link href="http://pminkov.github.io/blog/using-pandas-to-read-a-table-from-an-html-page.html" rel="alternate"></link><published>2016-10-31T13:56:00-07:00</published><updated>2016-10-31T13:56:00-07:00</updated><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-10-31:/blog/using-pandas-to-read-a-table-from-an-html-page.html</id><summary type="html">&lt;p&gt;Today I wanted to write a bit of simple code to try out a hypothesis I had about stock prices. I found historical data at &lt;a href="http://www.multpl.com/s-p-500-historical-prices/table/by-year"&gt;multpl.com&lt;/a&gt;. At first I thought I'd have to write my own code using Python's &lt;a href="https://docs.python.org/2/library/htmlparser.html"&gt;HTMLParser&lt;/a&gt;. As much as I like to write code, I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I wanted to write a bit of simple code to try out a hypothesis I had about stock prices. I found historical data at &lt;a href="http://www.multpl.com/s-p-500-historical-prices/table/by-year"&gt;multpl.com&lt;/a&gt;. At first I thought I'd have to write my own code using Python's &lt;a href="https://docs.python.org/2/library/htmlparser.html"&gt;HTMLParser&lt;/a&gt;. As much as I like to write code, I decided to save myself some time and find something that already does this. To my surprise, &lt;a href="http://pandas.pydata.org/"&gt;pandas&lt;/a&gt;, already has a &lt;a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_html.html"&gt;function&lt;/a&gt; that reads data from HTML tables. Great. Let's see how it works.&lt;/p&gt;
&lt;p&gt;First, I installed pandas, lxml and a bunch of other requirements in a &lt;a href="http://pminkov.github.io/why-i-always-use-virtualenv-to-try-out-new-libraries.html"&gt;virtual environment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To read the tables from the webpage, I used the following lines of code:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
  tables = pandas.read_html('http://www.multpl.com/s-p-500-historical-prices/table/by-month', header=0)
  assert len(tables) == 1
  table = tables[0]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;header&lt;/code&gt; parameter, says that we should use the first row in a table as the dataframe's column names. Spefically for this table, one of the columns was getting a somewhat wrong name, but it was easy to fix it with this line of code:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
table.columns = ['Date', 'Price']&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There we go, we have read historical stock prices into a pandas dataframe. To iterate and print them, we can do it like this:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;p&gt;for (idx, row) in table.iterrows():
   date = row['Date']
   price = row['Price']
   print date, price
```&lt;/p&gt;</content></entry><entry><title>What I learned from reading Dive into Python.</title><link href="http://pminkov.github.io/blog/what-i-learned-from-reading-dive-into-python.html" rel="alternate"></link><published>2016-06-15T09:57:00-07:00</published><updated>2016-06-15T09:57:00-07:00</updated><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-06-15:/blog/what-i-learned-from-reading-dive-into-python.html</id><summary type="html">&lt;p&gt;I recently started reading &lt;a href="http://www.diveintopython.net/toc/index.html"&gt;Dive into Python&lt;/a&gt;. I've been meaning to fill some gaps in my Python knowledge, since I've used the language for about ten years, but feel like I have just picked whatever parts I needed to do my work and don't have a very solid base.&lt;/p&gt;
&lt;p&gt;I'll …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently started reading &lt;a href="http://www.diveintopython.net/toc/index.html"&gt;Dive into Python&lt;/a&gt;. I've been meaning to fill some gaps in my Python knowledge, since I've used the language for about ten years, but feel like I have just picked whatever parts I needed to do my work and don't have a very solid base.&lt;/p&gt;
&lt;p&gt;I'll summarize some of the new things I learned from this book:&lt;/p&gt;
&lt;h3 id="chapter-2-your-first-python-program"&gt;Chapter 2 (Your First Python Program)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sys.path&lt;/code&gt; contains the list of directories that Python uses to lookup module imports.&lt;/li&gt;
&lt;li&gt;One use of the &lt;code&gt;__name__&lt;/code&gt; attribute is to write testing code. When a module is imported &lt;code&gt;__name__&lt;/code&gt; is the name of the module. When a module python file is executed from the command line &lt;code&gt;__name__&lt;/code&gt; is equal to &lt;code&gt;__main__&lt;/code&gt;. Personally this feels like a bit of a hack to me, since you can use something like say Django's unit testing platform, but it might come handy sometime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="chapter-3-native-datatypes"&gt;Chapter 3 (Native Datatypes)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Here's a cool trick mentioned in this chapter:
&lt;code&gt;python
(MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY) = range(7)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="chapter-4-the-power-of-introspection"&gt;Chapter 4 (The Power Of Introspection):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Some useful functions are mentioned: &lt;code&gt;dir&lt;/code&gt; (try on a module or an object instance), &lt;code&gt;callable&lt;/code&gt;, &lt;code&gt;getattr&lt;/code&gt;, &lt;code&gt;__doc__&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So you can do something interesting, like this:
```
class Sum:
  """Sums numbers"""
  member = 3&lt;/p&gt;
&lt;p&gt;def sum2(self, a, b):
    """Sum two numbers"""
    return a + b&lt;/p&gt;
&lt;p&gt;def sum3(self, a, b, c):
    """Sum three numbers"""
    return a + b + c&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
  methods = [f for f in dir(Sum) if callable(getattr(Sum, f))]
  docs = '\n'.join(["%s %s" % (f, getattr(Sum, f).&lt;strong&gt;doc&lt;/strong&gt;) for f in methods])
  print docs
```&lt;/p&gt;
&lt;p&gt;And run it:
&lt;code&gt;bash
$ python ./sum.py
sum2 Sum two numbers
sum3 Sum three numbers&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The "and-or trick"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;python
is_mammal = use_rpc and remote_check_is_mammal(animal) or DEFAULT_IS_MAMMAL&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That's like &lt;code&gt;?:&lt;/code&gt; in C++. I think I did well with creating a good example here :).&lt;/p&gt;
&lt;h3 id="chapter-5-objects-and-object-orientation"&gt;Chapter 5 (Objects and Object-Orientation)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var1 is var2&lt;/code&gt; checks for object identity. Here's a good &lt;a href="http://stackoverflow.com/questions/13650293/understanding-pythons-is-operator"&gt;stackoverflow&lt;/a&gt; article that gives examples.&lt;/li&gt;
&lt;li&gt;You can change a class variable using &lt;code&gt;self.__class__.variable_name = new_value&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can create your own dictionary by inheriting from &lt;code&gt;UserDict&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you call &lt;code&gt;x["hello"] = 3&lt;/code&gt;, this calls the &lt;code&gt;__setitem__&lt;/code&gt; method. There are other similar methods, like &lt;code&gt;__getitem__&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="chapter-6-exceptions-and-file-handling"&gt;Chapter 6 (Exceptions and file handling)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You can use &lt;code&gt;else&lt;/code&gt; in exceptions code. Like this:
```python
class RPC:
  def remote_call(self):
    pass&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;def find_function(name):
  try:
    a = getattr(RPC, name)
  except AttributeError:
    print 'No such function.'
  else:
    print 'Function was found.'
  finally:
    print 'Enough lookups.'
    print&lt;/p&gt;
&lt;p&gt;find_function('func')
find_function('remote_call')
```&lt;/p&gt;
&lt;p&gt;Output:
```bash
python ./ex.py 
No such function.
Enough lookups.&lt;/p&gt;
&lt;p&gt;Function was found.
Enough lookups.
```&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you open a file, you have a variety of functions and attributes on the file object, like &lt;code&gt;seek&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;mode&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;. For example, to see how big a file is you can just call &lt;code&gt;f.seek(0, 2)&lt;/code&gt; to seek until the end and then &lt;code&gt;f.tell()&lt;/code&gt; to output the number of bytes.&lt;/li&gt;
&lt;li&gt;A class' module is accessible by calling &lt;code&gt;ClassName.__module__&lt;/code&gt;. All imported modules are in the &lt;code&gt;sys.modules&lt;/code&gt; dictionary. Example:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from sum import Sum
import sys
sys.modules[Sum.&lt;strong&gt;module&lt;/strong&gt;]
&lt;module 'sum' from 'sum.py'&gt;
getattr(sys.modules[Sum.&lt;strong&gt;module&lt;/strong&gt;], 'Sum')
&lt;class sum.Sum at 0x109535a10&gt;
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id="chapter-7-regular-expressions"&gt;Chapter 7 (Regular Expressions)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\\b&lt;/code&gt; matches a word boundary. This can be so useful.&lt;/li&gt;
&lt;li&gt;Verbose regular expressions. Again, very useful. Example:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```python
import re&lt;/p&gt;
&lt;p&gt;raw_regex = r"""
  (\d{3})
  \D&lt;em&gt;
  (\d{3})
  \D&lt;/em&gt;
  (\d{4})
"""&lt;/p&gt;
&lt;p&gt;examples = [
  "4153125633",
  "415-312-5633",
  "415 312 5633",
  "work 415 312 5633",
  "(415) - 312 - 5633",
  "1 415 312 5633",
]&lt;/p&gt;
&lt;p&gt;phone_re = re.compile(raw_regex, re.VERBOSE)&lt;/p&gt;
&lt;p&gt;for example in examples:
  groups = phone_re.search(example).groups()
  assert groups == ('415', '312', '5633')
```&lt;/p&gt;</content></entry><entry><title>Why I always use virtualenv to try out new libraries.</title><link href="http://pminkov.github.io/blog/why-i-always-use-virtualenv-to-try-out-new-libraries.html" rel="alternate"></link><published>2016-05-24T18:14:00-07:00</published><updated>2016-05-24T18:14:00-07:00</updated><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-05-24:/blog/why-i-always-use-virtualenv-to-try-out-new-libraries.html</id><summary type="html">&lt;p&gt;One thing that I always do with virtualenv is to install new Python libraries in a new virtualenv before I install them into the one I'm currently working with.&lt;/p&gt;
&lt;p&gt;Here's how I do this:&lt;/p&gt;
&lt;p&gt;```
$ virtualenv venv
New python executable in /Users/petko/work/post/venv/bin/python
Installing setuptools, pip …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One thing that I always do with virtualenv is to install new Python libraries in a new virtualenv before I install them into the one I'm currently working with.&lt;/p&gt;
&lt;p&gt;Here's how I do this:&lt;/p&gt;
&lt;p&gt;```
$ virtualenv venv
New python executable in /Users/petko/work/post/venv/bin/python
Installing setuptools, pip, wheel...done.&lt;/p&gt;
&lt;p&gt;$ . ./venv/bin/activate
(venv) &lt;/p&gt;
&lt;p&gt;$ pip install cryptography
... lengthy install log ...&lt;/p&gt;
&lt;p&gt;$ pip install pipdeptree # Awesome tool, more in a bit.&lt;/p&gt;
&lt;p&gt;$ pipdeptree
Warning!!! Possibly conflicting dependencies found:
* cryptography==1.3.2
 - setuptools [required: &amp;gt;=11.3, installed: &lt;unknown&gt;]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;wheel==0.26.0
wsgiref==0.1.2
cryptography==1.3.2
  - setuptools [required: &amp;gt;=11.3]
  - enum34 [installed: 1.1.6]
  - ipaddress [installed: 1.0.16]
  - pyasn1 [required: &amp;gt;=0.1.8, installed: 0.1.9]
  - six [required: &amp;gt;=1.4.1, installed: 1.10.0]
  - idna [required: &amp;gt;=2.0, installed: 2.1]
  - cffi [required: &amp;gt;=1.4.1, installed: 1.6.0]
    - pycparser [installed: 2.14]
(venv) 
```&lt;/p&gt;
&lt;p&gt;That's it! Now I can experiment with a new library without worrying that it'll pollute my work virtualenv. Another thing that I do is using pipdeptree to see the dependencies that a new library will bring with it. If a library brings in too many dependencies, I'll be thinking twice about my need to use it, or I'll look for alternatives.&lt;/p&gt;</content></entry><entry><title>Type checking in Python?</title><link href="http://pminkov.github.io/blog/type-checking-in-python.html" rel="alternate"></link><published>2016-05-18T10:39:00-07:00</published><updated>2016-05-18T10:39:00-07:00</updated><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-05-18:/blog/type-checking-in-python.html</id><summary type="html">&lt;p&gt;Since Python is a dynamically typed language, it doesn't offer type checking out of the box. There are workarounds around this though.
One that I use in my projects is the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
def T(val, t):
  assert type(val) == t, '(%s) %s != %s' % (str(val), type(val), t)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since Python is a dynamically typed language, it doesn't offer type checking out of the box. There are workarounds around this though.
One that I use in my projects is the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
def T(val, t):
  assert type(val) == t, '(%s) %s != %s' % (str(val), type(val), t)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here's an example of how to use this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
def sum(a, b):
  T(a, int)
  T(b, int)
  return a + b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let's say that you call the function incorrectly, like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
a = "hello"
b = 5
s = sum(a, b)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You'll get the following exception:
```&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;sum(a, b)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in sum
  File "&lt;stdin&gt;", line 2, in T
AssertionError: (hello) &lt;type 'str'&gt; != &lt;type 'int'&gt;
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;So that's it - pretty simple. I use the &lt;code&gt;T&lt;/code&gt; function every once in a while, to guard against type errors.&lt;/p&gt;</content></entry></feed>