<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Petko's Coding Blog</title><link href="http://pminkov.github.io/blog/" rel="alternate"></link><link href="http://pminkov.github.io/blog/feeds/all.atom.xml" rel="self"></link><id>http://pminkov.github.io/blog/</id><updated>2017-03-07T12:42:00-08:00</updated><entry><title>Starting with Kubernetes on Google Container Engine</title><link href="http://pminkov.github.io/blog/starting-with-kubernetes-on-google-container-engine.html" rel="alternate"></link><published>2017-03-07T12:42:00-08:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2017-03-07:blog/starting-with-kubernetes-on-google-container-engine.html</id><summary type="html">&lt;p&gt;This is a tutorial of how to run a simple Kubernetes app on &lt;a href="https://cloud.google.com/container-engine/"&gt;GKE&lt;/a&gt; (Google Container Engine).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; is a container orchestration software that started at Google. Right now it's an open source project maintained by &lt;a href="https://www.cncf.io/"&gt;Cloud Native Computing Foundation&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;So what's Kubernetes all about? Roughly, it's about managing a cluster (a set of machines) on which we have containers running. &lt;/p&gt;
&lt;h3&gt;Why containers?&lt;/h3&gt;
&lt;p&gt;Well, that's a question that probably has a lot of answers, but containers are very lightweight virtual machines more or less. The technology under them is different than virtual machines though. We can orchestrate a set of VMs, but containers are much easier to work with. For example I have one VM running on my MacBook - it eats a lot of memory, it's managed by VirtualBox, it has a lot of stuff installed on it. I can't imagine having to run a bunch of these. Containers though, they're much easier to setup (you just write a text file that describes them - the Dockerfile) and much more lightweight. Their memory footprint can be pretty low. Containers can run on different OSs, some of which are very lightweight. Ok, enough about containers - back to Kubernetes.&lt;/p&gt;
&lt;h3&gt;What's in a cluster?&lt;/h3&gt;
&lt;p&gt;I mentioned clusters. But what's a cluster. A cluster has a set of nodes (think computers) on which we have pods, where each pod is a unit that contains several containers. That's the basic structure.&lt;/p&gt;
&lt;h3&gt;Running a simple Kubernetes app on GKE.&lt;/h3&gt;
&lt;p&gt;Alright, let's roll our sleeves. Google has its own &lt;a href="https://cloud.google.com/container-engine/docs/quickstart"&gt;Quickstart&lt;/a&gt; tutorial, but what I don't like about it is that it doesn't describe how to create your own container and it doesn't talk about the Kubernetes dashboard. But a lot of the steps here you can see in Google's tutorial as well.&lt;/p&gt;
&lt;p&gt;So let's start.&lt;/p&gt;
&lt;h3&gt;Create a project.&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Go to the &lt;a href="https://console.cloud.google.com"&gt;Cloud Console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create a project. Mine is called "mykube". Every project has an id that you're mostly working with. Mine is &lt;code&gt;mykube-160819&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Install necessary tools and initialize them.&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Install the &lt;a href="https://cloud.google.com/sdk/downloads"&gt;Google Cloud SDK&lt;/a&gt;. There's a web interface for working with the SDK, called Google Cloud Shell, but I like having the tools installed locally.&lt;/li&gt;
&lt;li&gt;Initialize gcloud by running &lt;code&gt;gcloud init&lt;/code&gt;. You'll be asked for the name of your project.&lt;/li&gt;
&lt;li&gt;Set a &lt;a href="https://cloud.google.com/compute/docs/regions-zones/regions-zones#available"&gt;Compute Engine zone&lt;/a&gt;, like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gcloud config &lt;span class="nb"&gt;set&lt;/span&gt; compute/zone us-central1-b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it. You can view your configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gcloud config list
Your active configuration is: &lt;span class="o"&gt;[&lt;/span&gt;mykube&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;compute&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;zone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; us-central1-b
&lt;span class="o"&gt;[&lt;/span&gt;core&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pminkov@gmail.com
&lt;span class="nv"&gt;disable_usage_reporting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mykube-160819
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's authenticate gcloud too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gcloud auth application-default login
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Run a container image.&lt;/h3&gt;
&lt;p&gt;Our container is going to be a node.js application that we'll build ourselves. I wanted to experiment with an app that takes a bit more memory, so here's how my code looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; 
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;handleRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Received request for URL: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Returning element at index &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;www&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleRequest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Listening on port 8080&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We also need a Dockerfile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat ./Dockerfile 
FROM node:4
EXPOSE 8080
COPY server.js .
CMD node server.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order to run a container on GKE, we need to upload it to &lt;a href="https://cloud.google.com/container-registry/"&gt;Google Container Registry&lt;/a&gt;. Let's do it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PROJECT_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mykube-160819
$ docker build -t gcr.io/&lt;span class="nv"&gt;$PROJECT_ID&lt;/span&gt;/myserver .
Sending build context to Docker daemon 3.584 kB
Step 1/4 : FROM node:4
 ---&amp;gt; d7efee1f035d
Step 2/4 : EXPOSE 8080
 ---&amp;gt; Using cache
 ---&amp;gt; 147e7888542d
Step 3/4 : COPY server.js .
 ---&amp;gt; Using cache
 ---&amp;gt; b610e7975d20
Step 4/4 : CMD node server.js
 ---&amp;gt; Using cache
 ---&amp;gt; 4e15133cdab2
Successfully built 4e15133cdab2
$ gcloud docker -- push gcr.io/&lt;span class="nv"&gt;$PROJECT_ID&lt;/span&gt;/myserver
The push refers to a repository &lt;span class="o"&gt;[&lt;/span&gt;gcr.io/mykube-160819/myserver&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# Note that I already have a project called &amp;quot;hikube&amp;quot; which has the same docker image.&lt;/span&gt;
&lt;span class="c1"&gt;# The &amp;quot;mykube&amp;quot; project is something I created for this tutorial.&lt;/span&gt;
1bcf3881e79d: Mounted from hikube-160719/myserver 
65e403c25ee9: Mounted from hikube-160719/myserver 
4732c3666dd7: Mounted from hikube-160719/myserver 
a1fbf6fa923f: Mounted from hikube-160719/myserver 
1b8ef9ac5116: Mounted from hikube-160719/myserver 
41ef8cc0bccb: Mounted from hikube-160719/myserver 
100396c46221: Mounted from hikube-160719/myserver 
7b4b54c74241: Mounted from hikube-160719/myserver 
d17d48b2382a: Mounted from hikube-160719/myserver 
latest: digest: sha256:4ad68f056e870938823f6c9555355c149cf7c42a213d7243d915f1a4bcfb9cb1 size: 2213
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you go to the Google Cloud Console and open the Google Container Registry, you'll see the container uploaded:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Google Container Registry" src="http://pminkov.github.io/blog/images/k8s-intro/k1-registry.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Now let's create a cluster that we'll be deploying our server to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gcloud container clusters create example-cluster
Creating cluster example-cluster...done.                                                                                                                                               
Created &lt;span class="o"&gt;[&lt;/span&gt;https://container.googleapis.com/v1/projects/mykube-160819/zones/us-central1-b/clusters/example-cluster&lt;span class="o"&gt;]&lt;/span&gt;.
kubeconfig entry generated &lt;span class="k"&gt;for&lt;/span&gt; example-cluster.
NAME             ZONE           MASTER_VERSION  MASTER_IP       MACHINE_TYPE   NODE_VERSION  NUM_NODES  STATUS
example-cluster  us-central1-b  1.5.3           104.198.190.52  n1-standard-1  1.5.3         &lt;span class="m"&gt;3&lt;/span&gt;          RUNNING
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Congratulations! We have a cluster running.&lt;/p&gt;
&lt;p&gt;A little segway. kubectl has a config that determines which cluster you're working with. You can switch between different clusters. Try it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl config current-context
gke_mykube-160819_us-central1-b_example-cluster
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We're good here - our context is for the "mykube" cluster. The cluster is empty, we can verify it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl get pods
No resources found.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's start out server finally:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl run myserver --image&lt;span class="o"&gt;=&lt;/span&gt;gcr.io/&lt;span class="nv"&gt;$PROJECT_ID&lt;/span&gt;/myserver --port&lt;span class="o"&gt;=&lt;/span&gt;8080
deployment &lt;span class="s2"&gt;&amp;quot;myserver&amp;quot;&lt;/span&gt; created
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have created a deployment that contains a pod. Let's see what pods we have now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl get pods
NAME                        READY     STATUS              RESTARTS   AGE
myserver-3430466764-04b36   0/1       ContainerCreating   &lt;span class="m"&gt;0&lt;/span&gt;          17s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nice, our container is getting spinned. We wait for a bit and we see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl get pods
NAME                        READY     STATUS    RESTARTS   AGE
myserver-3430466764-04b36   1/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          58s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can now expose the container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl expose deployment myserver --type&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;LoadBalancer&amp;quot;&lt;/span&gt;
service &lt;span class="s2"&gt;&amp;quot;myserver&amp;quot;&lt;/span&gt; exposed
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will also take some time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl get service myserver
NAME       CLUSTER-IP   EXTERNAL-IP   PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;          AGE
myserver   10.3.247.6   &amp;lt;pending&amp;gt;     8080:31574/TCP   34s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aaand, it's done:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl get service myserver
NAME       CLUSTER-IP   EXTERNAL-IP      PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;          AGE
myserver   10.3.247.6   104.155.177.47   8080:31574/TCP   1m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we go to &lt;code&gt;http://104.155.177.47:8080/&lt;/code&gt;, we'll see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Returning element at index 6110645: 116527640
Hello World!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, the tedious part is over. Let's have some fun. We can monitor our cluster through the Kubernetes dashboard. For a reason unclear to me, this dashboard is not available on the Google website. You have to run a proxy to do it. Like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl proxy
Starting to serve on 127.0.0.1:8001
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see the dashboard at &lt;code&gt;localhost:8001/ui&lt;/code&gt;. It looks like this:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Kubernetes Dashboard" src="http://pminkov.github.io/blog/images/k8s-intro/k2-dashboard.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;This dashboard is a lot of fun. You can dig into everything available in it. You can probably see everything it shows through kubectl as well, but it's easier to do it by using an UI.&lt;/p&gt;
&lt;p&gt;Here's something else that's fun. Your cluster doesn't run on thin air. It runs on Google Compute Engine instances (I believe this is equivalent to AWS' EC2). In your cloud console, you can navigate to your instances and you can even SSH to an instance from the web UI (I wow-ed the first time I did this, much easier than setting up ssh access on AWS).&lt;/p&gt;
&lt;p&gt;Our cluster has three nodes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl get nodes
NAME                                             STATUS    AGE
gke-example-cluster-default-pool-2567fc65-1h40   Ready     21m
gke-example-cluster-default-pool-2567fc65-g7lc   Ready     21m
gke-example-cluster-default-pool-2567fc65-n0cp   Ready     21m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These are three GCE instances. Where is our pod running at?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl get pods -o wide
NAME                        READY     STATUS    RESTARTS   AGE       IP         NODE
myserver-3430466764-04b36   1/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          18m       10.0.1.5   gke-example-cluster-default-pool-2567fc65-g7lc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's running on &lt;code&gt;gke-example-cluster-default-pool-2567fc65-g7lc&lt;/code&gt;. Now I can navigate to the web page for this instance and ssh to it. Here's a screenshot of how that looks like:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Compute Engine SSH" src="http://pminkov.github.io/blog/images/k8s-intro/k3-compute-engine.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;I ran &lt;code&gt;ps aux --sort '%mem'&lt;/code&gt; to see which process takes most memory. Since my server uses a lot of memory, it's at the top. It's using 179MB of resident memory.&lt;/p&gt;
&lt;p&gt;It's pretty nice that you're able to nagivate from a high level system like Kubernetes all the way down to ssh-ing to a machine that runs your containers. When you're ssh-ed you can execute &lt;code&gt;docker ps&lt;/code&gt; to see what containers are running, run &lt;code&gt;top&lt;/code&gt; to see what's going on on the machine and do all of the other systems debugging tasks that you can think of.&lt;/p&gt;
&lt;p&gt;And finally, let's delete our cluster:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gcloud container clusters delete example-cluster
The following clusters will be deleted.
 - &lt;span class="o"&gt;[&lt;/span&gt;example-cluster&lt;span class="o"&gt;]&lt;/span&gt; in &lt;span class="o"&gt;[&lt;/span&gt;us-central1-b&lt;span class="o"&gt;]&lt;/span&gt;

Do you want to &lt;span class="k"&gt;continue&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;?  

Deleting cluster example-cluster...done.                                                                                                                                               
Deleted &lt;span class="o"&gt;[&lt;/span&gt;https://container.googleapis.com/v1/projects/mykube-160819/zones/us-central1-b/clusters/example-cluster&lt;span class="o"&gt;]&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's all for today - enjoy.&lt;/p&gt;</summary></entry><entry><title>Examining a process in Linux.</title><link href="http://pminkov.github.io/blog/examining-a-process-in-linux.html" rel="alternate"></link><published>2017-03-01T12:26:00-08:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2017-03-01:blog/examining-a-process-in-linux.html</id><summary type="html">&lt;p&gt;I've been thinking about writing a blog post about Linux tools and commands related to processes. Let's take a look at some of them.&lt;/p&gt;
&lt;p&gt;The process that we'll be looking at is a &lt;a href="https://github.com/pminkov/webserver"&gt;webserver&lt;/a&gt; that I wrote some time ago to practice my C and write some code that does network related work. This webserver runs a &lt;a href="https://github.com/pminkov/threadpool"&gt;threadpool&lt;/a&gt; where N threads are waiting for server requests that they're going to execute.&lt;/p&gt;
&lt;p&gt;So let's start the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./server
Running on port: 8000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great. So which process is this server running as? We can use the &lt;code&gt;pidof&lt;/code&gt; command to find that out. Its output looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pidof server
8876
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we had other processes which were running an executable with that name, we'd see more process ids, but since we only have one, we see one process id.&lt;/p&gt;
&lt;p&gt;What next? Let's see how the process is layed out in memory. To do this, we can use the &lt;code&gt;pmap&lt;/code&gt; command. Its output looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pmap -p 8876
8876:   ./server
&lt;span class="m"&gt;0000000000400000&lt;/span&gt;     16K r-x-- /home/petko/work/github/webserver/server
&lt;span class="m"&gt;0000000000603000&lt;/span&gt;      4K r---- /home/petko/work/github/webserver/server
&lt;span class="m"&gt;0000000000604000&lt;/span&gt;      4K rw--- /home/petko/work/github/webserver/server
000000000110f000    132K rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fd5ca731000      4K -----   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fd5ca732000   8192K rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fd5caf32000      4K -----   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fd5caf33000   8192K rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fd5cb733000      4K -----   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fd5cb734000   8192K rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fd5cbf34000      4K -----   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fd5cbf35000   8192K rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fd5cc735000   1792K r-x-- /lib/x86_64-linux-gnu/libc-2.23.so
00007fd5cc8f5000   2044K ----- /lib/x86_64-linux-gnu/libc-2.23.so
00007fd5ccaf4000     16K r---- /lib/x86_64-linux-gnu/libc-2.23.so
00007fd5ccaf8000      8K rw--- /lib/x86_64-linux-gnu/libc-2.23.so
00007fd5ccafa000     16K rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fd5ccafe000     96K r-x-- /lib/x86_64-linux-gnu/libpthread-2.23.so
00007fd5ccb16000   2044K ----- /lib/x86_64-linux-gnu/libpthread-2.23.so
00007fd5ccd15000      4K r---- /lib/x86_64-linux-gnu/libpthread-2.23.so
00007fd5ccd16000      4K rw--- /lib/x86_64-linux-gnu/libpthread-2.23.so
00007fd5ccd17000     16K rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fd5ccd1b000    152K r-x-- /lib/x86_64-linux-gnu/ld-2.23.so
00007fd5ccf22000     12K rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fd5ccf3e000      8K rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007fd5ccf40000      4K r---- /lib/x86_64-linux-gnu/ld-2.23.so
00007fd5ccf41000      4K rw--- /lib/x86_64-linux-gnu/ld-2.23.so
00007fd5ccf42000      4K rw---   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007ffca0861000    132K rw---   &lt;span class="o"&gt;[&lt;/span&gt; stack &lt;span class="o"&gt;]&lt;/span&gt;
00007ffca09eb000      8K r----   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
00007ffca09ed000      8K r-x--   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
ffffffffff600000      4K r-x--   &lt;span class="o"&gt;[&lt;/span&gt; anon &lt;span class="o"&gt;]&lt;/span&gt;
total            39316K
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What you see here are virtual memory addresses. For example, let's take a look at this line:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;00007fd5cc735000   1792K r-x-- /lib/x86_64-linux-gnu/libc-2.23.so&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is the code for &lt;code&gt;libc&lt;/code&gt;, which is the C standard library. This code is shared between processes that need it. We can see the &lt;code&gt;x&lt;/code&gt; flag, which means that this is executable memory. The size if roughly the same as the size of this &lt;code&gt;so&lt;/code&gt; file. This library is memory mapped into a region starting at address &lt;code&gt;00007fd5cc735000&lt;/code&gt;, but in physical memory it's only stored in one place. To learn more about memory in Linux, here's a &lt;a href="https://techtalk.intersec.com/2013/07/memory-part-1-memory-types/"&gt;great post&lt;/a&gt; going into detail about it.&lt;/p&gt;
&lt;p&gt;Another interesting command is &lt;code&gt;lsof&lt;/code&gt;. &lt;code&gt;lsof&lt;/code&gt; stands for "list of open files". Let's see its output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo lsof -p 8876
COMMAND  PID  USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME
server  &lt;span class="m"&gt;8876&lt;/span&gt; petko  cwd    DIR    8,1     &lt;span class="m"&gt;4096&lt;/span&gt;  &lt;span class="m"&gt;262299&lt;/span&gt; /home/petko/work/github/webserver
server  &lt;span class="m"&gt;8876&lt;/span&gt; petko  rtd    DIR    8,1     &lt;span class="m"&gt;4096&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt; /
server  &lt;span class="m"&gt;8876&lt;/span&gt; petko  txt    REG    8,1    &lt;span class="m"&gt;25536&lt;/span&gt;  &lt;span class="m"&gt;306491&lt;/span&gt; /home/petko/work/github/webserver/server
server  &lt;span class="m"&gt;8876&lt;/span&gt; petko  mem    REG    8,1  &lt;span class="m"&gt;1864888&lt;/span&gt; &lt;span class="m"&gt;1184834&lt;/span&gt; /lib/x86_64-linux-gnu/libc-2.23.so
server  &lt;span class="m"&gt;8876&lt;/span&gt; petko  mem    REG    8,1   &lt;span class="m"&gt;138744&lt;/span&gt; &lt;span class="m"&gt;1184980&lt;/span&gt; /lib/x86_64-linux-gnu/libpthread-2.23.so
server  &lt;span class="m"&gt;8876&lt;/span&gt; petko  mem    REG    8,1   &lt;span class="m"&gt;162632&lt;/span&gt; &lt;span class="m"&gt;1184806&lt;/span&gt; /lib/x86_64-linux-gnu/ld-2.23.so
server  &lt;span class="m"&gt;8876&lt;/span&gt; petko    0u   CHR  136,9      0t0      &lt;span class="m"&gt;12&lt;/span&gt; /dev/pts/9
server  &lt;span class="m"&gt;8876&lt;/span&gt; petko    1u   CHR  136,9      0t0      &lt;span class="m"&gt;12&lt;/span&gt; /dev/pts/9
server  &lt;span class="m"&gt;8876&lt;/span&gt; petko    2u   CHR  136,9      0t0      &lt;span class="m"&gt;12&lt;/span&gt; /dev/pts/9
server  &lt;span class="m"&gt;8876&lt;/span&gt; petko    3u  IPv4  &lt;span class="m"&gt;81993&lt;/span&gt;      0t0     TCP *:8000 &lt;span class="o"&gt;(&lt;/span&gt;LISTEN&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, we have file descriptors 0,1 and 2, which are stdin, stdout and stderr. They are linked to the terminal in which the process is running in. You can write to that terminal btw. Just type &lt;code&gt;echo "hello world" &amp;gt; /dev/pts/9&lt;/code&gt; and you'll see that text in the terminal where your webserver is running. File descriptor number 3 is our socket which accepts connections.&lt;/p&gt;
&lt;p&gt;Another interesting way to inspect processes is the ps command. Its basic output looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ps --pid 8876
  PID TTY          TIME CMD
 &lt;span class="m"&gt;8876&lt;/span&gt; pts/9    00:00:00 server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is simple. We can also show the threads inside a process, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ps  m --pid &lt;span class="m"&gt;8876&lt;/span&gt; -o pid,tid,cmd
  PID   TID CMD
 &lt;span class="m"&gt;8876&lt;/span&gt;     - ./server
    -  &lt;span class="m"&gt;8876&lt;/span&gt; -
    -  &lt;span class="m"&gt;8877&lt;/span&gt; -
    -  &lt;span class="m"&gt;8878&lt;/span&gt; -
    -  &lt;span class="m"&gt;8879&lt;/span&gt; -
    -  &lt;span class="m"&gt;8880&lt;/span&gt; -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have five threads here. One is our main thread and the other four are the threadpool threads. The &lt;code&gt;m&lt;/code&gt; option tells ps to show the threads of a process. The &lt;code&gt;-o&lt;/code&gt; option specifies fields to output. We can even get fancy and output the addresses of the threads' stack pointers and instruction pointers, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ps  m --pid &lt;span class="m"&gt;8876&lt;/span&gt; -o pid,tid,cmd,esp,eip
  PID   TID CMD                              ESP      EIP
 &lt;span class="m"&gt;8876&lt;/span&gt;     - ./server                           -        -
    -  &lt;span class="m"&gt;8876&lt;/span&gt; -                           a0880b70 ccb0e7ad
    -  &lt;span class="m"&gt;8877&lt;/span&gt; -                           cc733ec0 ccb0b3a0
    -  &lt;span class="m"&gt;8878&lt;/span&gt; -                           cbf32ec0 ccb0b3a0
    -  &lt;span class="m"&gt;8879&lt;/span&gt; -                           cb731ec0 ccb0b3a0
    -  &lt;span class="m"&gt;8880&lt;/span&gt; -                           caf30ec0 ccb0b3a0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So all the threads are at the same instruction, but they have different stack pointers, which makes sense. If I execute something on one of the threads, both the &lt;code&gt;ESP&lt;/code&gt; and &lt;code&gt;EIP&lt;/code&gt; can possibly change.&lt;/p&gt;
&lt;p&gt;A lot of data about processes lives in the &lt;code&gt;proc&lt;/code&gt; filesytem, located in &lt;code&gt;/proc&lt;/code&gt;. For each running process, there's a subdirectory of &lt;code&gt;/proc&lt;/code&gt; named after the process id. For example, for our process &lt;code&gt;8876&lt;/code&gt;, there's a &lt;code&gt;status&lt;/code&gt; file which lists various information about the process. Let's look at it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat /proc/8876/status
Name:   server
State:  S &lt;span class="o"&gt;(&lt;/span&gt;sleeping&lt;span class="o"&gt;)&lt;/span&gt;
Tgid:   8876
Ngid:   0
Pid:    8876
PPid:   2604
TracerPid:      0
Uid:    &lt;span class="m"&gt;1000&lt;/span&gt;    &lt;span class="m"&gt;1000&lt;/span&gt;    &lt;span class="m"&gt;1000&lt;/span&gt;    1000
Gid:    &lt;span class="m"&gt;1000&lt;/span&gt;    &lt;span class="m"&gt;1000&lt;/span&gt;    &lt;span class="m"&gt;1000&lt;/span&gt;    1000
FDSize: 256
Groups: &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="m"&gt;46&lt;/span&gt; &lt;span class="m"&gt;113&lt;/span&gt; &lt;span class="m"&gt;128&lt;/span&gt; &lt;span class="m"&gt;999&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt; 
NStgid: 8876
NSpid:  8876
NSpgid: 8876
NSsid:  2604
VmPeak:    &lt;span class="m"&gt;39316&lt;/span&gt; kB
VmSize:    &lt;span class="m"&gt;39316&lt;/span&gt; kB
VmLck:         &lt;span class="m"&gt;0&lt;/span&gt; kB
VmPin:         &lt;span class="m"&gt;0&lt;/span&gt; kB
VmHWM:       &lt;span class="m"&gt;800&lt;/span&gt; kB
VmRSS:       &lt;span class="m"&gt;800&lt;/span&gt; kB
VmData:    &lt;span class="m"&gt;32988&lt;/span&gt; kB
VmStk:       &lt;span class="m"&gt;136&lt;/span&gt; kB
VmExe:        &lt;span class="m"&gt;16&lt;/span&gt; kB
VmLib:      &lt;span class="m"&gt;2040&lt;/span&gt; kB
VmPTE:        &lt;span class="m"&gt;48&lt;/span&gt; kB
VmPMD:        &lt;span class="m"&gt;12&lt;/span&gt; kB
VmSwap:        &lt;span class="m"&gt;0&lt;/span&gt; kB
HugetlbPages:          &lt;span class="m"&gt;0&lt;/span&gt; kB
Threads:        5
SigQ:   0/7848
SigPnd: 0000000000000000
ShdPnd: 0000000000000000
SigBlk: 0000000000000000
SigIgn: 0000000000000000
SigCgt: 0000000180000000
CapInh: 0000000000000000
CapPrm: 0000000000000000
CapEff: 0000000000000000
CapBnd: 0000003fffffffff
CapAmb: 0000000000000000
Seccomp:        0
Cpus_allowed:   1
Cpus_allowed_list:      0
Mems_allowed:   00000000,00000001
Mems_allowed_list:      0
voluntary_ctxt_switches:        3
nonvoluntary_ctxt_switches:     2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There's a lot of data in here, but remember how we used &lt;code&gt;ps&lt;/code&gt; to count the number of threads in this process. That's also available here on the line saying &lt;code&gt;Threads:    5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our last command is &lt;code&gt;pidstat&lt;/code&gt;. &lt;code&gt;pidstat&lt;/code&gt; shows statistics about a running process, which can be updated at a regular time interval. A possible invocation can be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pidstat -p &lt;span class="m"&gt;8876&lt;/span&gt; 1
Linux 4.4.0-64-generic &lt;span class="o"&gt;(&lt;/span&gt;virtbox&lt;span class="o"&gt;)&lt;/span&gt;        03/01/2017      _x86_64_        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; CPU&lt;span class="o"&gt;)&lt;/span&gt;

12:22:00 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command
12:22:01 PM  &lt;span class="m"&gt;1000&lt;/span&gt;      &lt;span class="m"&gt;8876&lt;/span&gt;    0.00    0.00    0.00    0.00     &lt;span class="m"&gt;0&lt;/span&gt;  server
12:22:02 PM  &lt;span class="m"&gt;1000&lt;/span&gt;      &lt;span class="m"&gt;8876&lt;/span&gt;    0.00    0.00    0.00    0.00     &lt;span class="m"&gt;0&lt;/span&gt;  server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our server is not doing anything right now, so you see a lot of zeroes.&lt;/p&gt;
&lt;p&gt;There are many other interesting commands that you can look to figure out what processes are doing. &lt;code&gt;strace&lt;/code&gt; shows system calls run by a process. &lt;code&gt;ltrace&lt;/code&gt; shows dynamic library calls. &lt;code&gt;tcpdump&lt;/code&gt; can be used to show traffic going in and out of a process.&lt;/p&gt;
&lt;p&gt;So, that's all for today. Happy running of processes.&lt;/p&gt;</summary></entry><entry><title>The Linux init system.</title><link href="http://pminkov.github.io/blog/the-linux-init-system.html" rel="alternate"></link><published>2017-02-13T21:09:00-08:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2017-02-13:blog/the-linux-init-system.html</id><summary type="html">&lt;p&gt;I decided that I'll dig down into &lt;a href="https://en.wikipedia.org/wiki/Init"&gt;init systems&lt;/a&gt; in Linux and learn more about them. I'm running Ubuntu 16.04, so this might look different on other distributions.&lt;/p&gt;
&lt;p&gt;The init system in Linux is mainly responsible for starting essential service processes, mounting file systems and possibly other tasks. The main init systems are systemd, System V init and Upstart. Ubuntu uses systemd.&lt;/p&gt;
&lt;p&gt;The init system starts after the Kernel starts its first user space process - init. Indeed, let's see what's running with PID 1:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ps 1
  PID TTY      STAT   TIME COMMAND
    &lt;span class="m"&gt;1&lt;/span&gt; ?        Ss     0:04 /sbin/init splash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's &lt;code&gt;/sbin/init&lt;/code&gt;. Let's see what this file is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -l /sbin/init
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;20&lt;/span&gt; Sep &lt;span class="m"&gt;28&lt;/span&gt; 18:40 /sbin/init -&amp;gt; /lib/systemd/systemd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From this output, we can figure out that Ubuntu is using systemd. systemd is a fairly new project (initial release was 6 years ago), but it looks like its widely adopted now. systemd would take care of running various services like your ssh server, your web server and various other ones which are more "under the hood" oriented.&lt;/p&gt;
&lt;p&gt;systemd organizes itself with unit files which contain the description of various units and their dependencies. The units are organized in configuration files, which live in various directories. The main directories are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System unit directory: &lt;code&gt;/usr/lib/systemd/&lt;/code&gt;. Your distribution maintains this, so don't edit it.&lt;/li&gt;
&lt;li&gt;System configuration directory: &lt;code&gt;/etc/systemd&lt;/code&gt;. Make your local changes here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, these are not all directories that contain unit files. Here's the full set of paths that systemd uses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ systemctl -p UnitPath show
&lt;span class="nv"&gt;UnitPath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/systemd/system /run/systemd/system /run/systemd/generator /usr/local/lib/systemd/system /lib/systemd/system /usr/lib/systemd/system /run/systemd/generator.late
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I won't go into details about what the unit files contain, but instead look at two services that I was curious about - ssh and apache. Who runs them? When are they run? How can I verify that they are running?&lt;/p&gt;
&lt;p&gt;Let's start with ssh. The main command to interface with systemd is &lt;code&gt;systemctl&lt;/code&gt;. We can use it to list all services that are running, by calling &lt;code&gt;systemctl list-units&lt;/code&gt;. Let's look for ssh in here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ systemctl list-units &lt;span class="p"&gt;|&lt;/span&gt; grep ssh
ssh.service                                                                              loaded active running   OpenBSD Secure Shell server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Indeed, we have ssh running. Now, let's look at its status and its config file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ systemctl status ssh
● ssh.service - OpenBSD Secure Shell server
   Loaded: loaded &lt;span class="o"&gt;(&lt;/span&gt;/lib/systemd/system/ssh.service&lt;span class="p"&gt;;&lt;/span&gt; enabled&lt;span class="p"&gt;;&lt;/span&gt; vendor preset: enabled&lt;span class="o"&gt;)&lt;/span&gt;
   Active: active &lt;span class="o"&gt;(&lt;/span&gt;running&lt;span class="o"&gt;)&lt;/span&gt; since Thu 2017-02-09 19:27:57 PST&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; days ago
 Main PID: &lt;span class="m"&gt;786&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;sshd&lt;span class="o"&gt;)&lt;/span&gt;
    Tasks: 1
   Memory: 6.4M
      CPU: 199ms
   CGroup: /system.slice/ssh.service
           └─786 /usr/sbin/sshd -D

Feb &lt;span class="m"&gt;12&lt;/span&gt; 18:23:50 virtbox sshd&lt;span class="o"&gt;[&lt;/span&gt;5791&lt;span class="o"&gt;]&lt;/span&gt;: Accepted password &lt;span class="k"&gt;for&lt;/span&gt; petko from 192.168.1.86 port &lt;span class="m"&gt;57805&lt;/span&gt; ssh2
Feb &lt;span class="m"&gt;12&lt;/span&gt; 18:23:50 virtbox sshd&lt;span class="o"&gt;[&lt;/span&gt;5791&lt;span class="o"&gt;]&lt;/span&gt;: pam_unix&lt;span class="o"&gt;(&lt;/span&gt;sshd:session&lt;span class="o"&gt;)&lt;/span&gt;: session opened &lt;span class="k"&gt;for&lt;/span&gt; user petko by &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So here it is. The ssh service is running as process 786. We can see that this process is listening on port 22:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo netstat -tulpn &lt;span class="p"&gt;|&lt;/span&gt; grep 786
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; 0.0.0.0:22              0.0.0.0:*               LISTEN      786/sshd        
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::22                   :::*                    LISTEN      786/sshd 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Indeed, it is. &lt;code&gt;systemctl&lt;/code&gt; has another useful command that allows us to print the configuration file for a unit. It works like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ systemctl cat ssh
&lt;span class="c1"&gt;# /lib/systemd/system/ssh.service&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OpenBSD Secure Shell server
&lt;span class="nv"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network.target auditd.service
&lt;span class="nv"&gt;ConditionPathExists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;!/etc/ssh/sshd_not_to_be_run

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;EnvironmentFile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-/etc/default/ssh
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/sbin/sshd -D &lt;span class="nv"&gt;$SSHD_OPTS&lt;/span&gt;
&lt;span class="nv"&gt;ExecReload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/kill -HUP &lt;span class="nv"&gt;$MAINPID&lt;/span&gt;
&lt;span class="nv"&gt;KillMode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;process
&lt;span class="nv"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on-failure
&lt;span class="nv"&gt;RestartPreventExitStatus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;255
&lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;notify

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
&lt;span class="nv"&gt;Alias&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sshd.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So here you can see where is the configuration file located.&lt;/p&gt;
&lt;p&gt;Alright, enough ssh. Let's move on to apache. First, a little history though. Before systemd, apparently the main init system in Linux was System V. System V is different than systemd, because it executes services in sequential order, while systemd can be parallel. System V also can't start services on "as-needed" basis. So I guess that's why systemd was implemented. systemd has its config files in &lt;code&gt;/etc/init.d&lt;/code&gt;. That's where Apache installs its command files as well - it doesn't create systemd unit files. However, systemd knows how to execute the System V init files. I won't go into details of how System V init works, but basically it executes commands on different runlevels and at each runlevel they are executed in sequential order.&lt;/p&gt;
&lt;p&gt;Let's see how apache looks like in systemd:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ systemctl list-units &lt;span class="p"&gt;|&lt;/span&gt; grep apache
apache2.service                                                                          loaded active running   LSB: Apache2 web server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's running. Now let's get its status:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ systemctl status apache2
● apache2.service - LSB: Apache2 web server
   Loaded: loaded &lt;span class="o"&gt;(&lt;/span&gt;/etc/init.d/apache2&lt;span class="p"&gt;;&lt;/span&gt; bad&lt;span class="p"&gt;;&lt;/span&gt; vendor preset: enabled&lt;span class="o"&gt;)&lt;/span&gt;
  Drop-In: /lib/systemd/system/apache2.service.d
           └─apache2-systemd.conf
   Active: active &lt;span class="o"&gt;(&lt;/span&gt;running&lt;span class="o"&gt;)&lt;/span&gt; since Mon 2017-02-13 12:49:55 PST&lt;span class="p"&gt;;&lt;/span&gt; 8h ago
     Docs: man:systemd-sysv-generator&lt;span class="o"&gt;(&lt;/span&gt;8&lt;span class="o"&gt;)&lt;/span&gt;
    Tasks: 55
   Memory: 6.5M
      CPU: 17.042s
   CGroup: /system.slice/apache2.service
           ├─9097 /usr/sbin/apache2 -k start
           ├─9100 /usr/sbin/apache2 -k start
           └─9101 /usr/sbin/apache2 -k start

Feb &lt;span class="m"&gt;13&lt;/span&gt; 12:49:54 virtbox systemd&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;: Starting LSB: Apache2 web server...
Feb &lt;span class="m"&gt;13&lt;/span&gt; 12:49:54 virtbox apache2&lt;span class="o"&gt;[&lt;/span&gt;9071&lt;span class="o"&gt;]&lt;/span&gt;:  * Starting Apache httpd web server apache2
Feb &lt;span class="m"&gt;13&lt;/span&gt; 12:49:54 virtbox apache2&lt;span class="o"&gt;[&lt;/span&gt;9071&lt;span class="o"&gt;]&lt;/span&gt;: AH00558: apache2: Could not reliably determine the server&lt;span class="s1"&gt;&amp;#39;s fully qualified domain name, using 127.0.1.1. Set the &amp;#39;&lt;/span&gt;ServerName&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; directive globall
Feb &lt;span class="m"&gt;13&lt;/span&gt; 12:49:55 virtbox apache2&lt;span class="o"&gt;[&lt;/span&gt;9071&lt;span class="o"&gt;]&lt;/span&gt;:  *
Feb &lt;span class="m"&gt;13&lt;/span&gt; 12:49:55 virtbox systemd&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;: Started LSB: Apache2 web server.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Look at something interesting here. The file responsible for starting apache is listed as &lt;code&gt;/etc/init.d/apache2&lt;/code&gt;. That's the file indeed. It's adapted into systemd by using the &lt;code&gt;systemd-sysv-generator&lt;/code&gt;. So that is systemd running. We can run a cat to see that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ systemctl cat apache2
&lt;span class="c1"&gt;# /run/systemd/generator.late/apache2.service&lt;/span&gt;
&lt;span class="c1"&gt;# Automatically generated by systemd-sysv-generator&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Documentation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;man:systemd-sysv-generator&lt;span class="o"&gt;(&lt;/span&gt;8&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;SourcePath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/init.d/apache2
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;LSB: Apache2 web server
&lt;span class="nv"&gt;Before&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
&lt;span class="nv"&gt;Before&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
&lt;span class="nv"&gt;Before&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
&lt;span class="nv"&gt;Before&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;graphical.target
&lt;span class="nv"&gt;Before&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;shutdown.target
&lt;span class="nv"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;local-fs.target
&lt;span class="nv"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;remote-fs.target
&lt;span class="nv"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network-online.target
&lt;span class="nv"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;systemd-journald-dev-log.socket
&lt;span class="nv"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nss-lookup.target
&lt;span class="nv"&gt;Wants&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network-online.target
&lt;span class="nv"&gt;Conflicts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;shutdown.target

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;forking
&lt;span class="nv"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no
&lt;span class="nv"&gt;TimeoutSec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5min
&lt;span class="nv"&gt;IgnoreSIGPIPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no
&lt;span class="nv"&gt;KillMode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;process
&lt;span class="nv"&gt;GuessMainPID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no
&lt;span class="nv"&gt;RemainAfterExit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/init.d/apache2 start
&lt;span class="nv"&gt;ExecStop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/init.d/apache2 stop
&lt;span class="nv"&gt;ExecReload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/init.d/apache2 reload

&lt;span class="c1"&gt;# /lib/systemd/system/apache2.service.d/apache2-systemd.conf&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;forking
&lt;span class="nv"&gt;RemainAfterExit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the file that systemd created in order to integrate the System V init command into its system.&lt;/p&gt;
&lt;p&gt;What are some other interesting systemctl commands? Let's list them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Start / stop /restart a service.&lt;/span&gt;
$ sudo systemctl restart apache2

&lt;span class="c1"&gt;# List all services:&lt;/span&gt;
$ systemctl list-units --type&lt;span class="o"&gt;=&lt;/span&gt;service

&lt;span class="c1"&gt;# List dependencies:&lt;/span&gt;
$ systemctl list-dependencies sshd.service

&lt;span class="c1"&gt;# See low level properties of a unit:&lt;/span&gt;
$ systemctl show sshd.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And one last cool command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ systemd-analyze
Startup finished in 3.989s &lt;span class="o"&gt;(&lt;/span&gt;kernel&lt;span class="o"&gt;)&lt;/span&gt; + 7.673s &lt;span class="o"&gt;(&lt;/span&gt;userspace&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 11.663s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command prints the time it took to startup our system.&lt;/p&gt;
&lt;p&gt;So that's all for today. There's definitely more to explore in systemd land - the syntax of unit files, how systemd executes them and so on. I'll leave that for some other time.&lt;/p&gt;</summary></entry><entry><title>How to shut down and restore an Elastic Beanstalk environment.</title><link href="http://pminkov.github.io/blog/how-to-shut-down-and-restore-an-elastic-beanstalk-environment.html" rel="alternate"></link><published>2017-01-30T12:07:00-08:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2017-01-30:blog/how-to-shut-down-and-restore-an-elastic-beanstalk-environment.html</id><summary type="html">&lt;p&gt;Let's say you're running an &lt;a href="https://aws.amazon.com/elasticbeanstalk/"&gt;Elastic Beanstalk&lt;/a&gt; application. You might want to stop it so that you're not paying money for it. There's one way to do this by running commands. You can use &lt;code&gt;eb terminate&lt;/code&gt; and &lt;code&gt;eb restore&lt;/code&gt;, but if you terminate a setup with a database and you restore it, the contents of the database won't be restored. You can also only restore an environment that has been terminated within the last 6 weeks.&lt;/p&gt;
&lt;p&gt;Let's see how we can terminate and restore without the 6 weeks restriction and let's also see how does the database backup and restore look like.&lt;/p&gt;
&lt;p&gt;The first thing that you have to do is to save your environment, which pretty much consists of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elastic Beanstalk &lt;a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-configuration-savedconfig.html"&gt;configuration&lt;/a&gt;. This is located in the &lt;code&gt;.elasticbeanstalk&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/ebextensions.html"&gt;Environment customizations&lt;/a&gt;. They're located in the &lt;code&gt;.ebextensions&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Your source code. Located in your base directory.&lt;/li&gt;
&lt;li&gt;A database (optional).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My particular app is a single instance Python/Django application with a MySQL database hosted in RDS.&lt;/p&gt;
&lt;p&gt;So let's get started.&lt;/p&gt;
&lt;h2&gt;Backing up your environment.&lt;/h2&gt;
&lt;p&gt;First, get the name of your environment. Mine is &lt;code&gt;neatlinks-dev&lt;/code&gt;. Run the following commands after that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;EB_DATE_LABEL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +&lt;span class="s2"&gt;&amp;quot;D%F-T%H-%M-%S&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;# Name of saved config.&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;EB_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;saved-&lt;span class="nv"&gt;$EB_DATE_LABEL&lt;/span&gt;

&lt;span class="c1"&gt;# Name of database snapshot.&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;EB_SNAPSHOT_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;snapshot-&lt;span class="nv"&gt;$EB_DATE_LABEL&lt;/span&gt;

&lt;span class="c1"&gt;# Instance id for our current database.&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;EB_DB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aaeag9ndvxonft&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Save the environment cname, we&amp;#39;ll need it later.&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;EB_CNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;neatlinks-dev-www&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Save current config.&lt;/span&gt;
eb config save neatlinks-dev --cfg &lt;span class="nv"&gt;$EB_CONFIG&lt;/span&gt;

&lt;span class="c1"&gt;# Create and wait for database snapshot.&lt;/span&gt;
aws rds create-db-snapshot &lt;span class="se"&gt;\&lt;/span&gt;
    --db-instance-identifier &lt;span class="nv"&gt;$EB_DB&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --db-snapshot-identifier &lt;span class="nv"&gt;$EB_SNAPSHOT_NAME&lt;/span&gt;
&lt;span class="nb"&gt;time&lt;/span&gt; aws rds &lt;span class="nb"&gt;wait&lt;/span&gt; db-snapshot-completed &lt;span class="se"&gt;\&lt;/span&gt;
    --db-instance-identifier &lt;span class="nv"&gt;$EB_DB&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --db-snapshot-identifier &lt;span class="nv"&gt;$EB_SNAPSHOT_NAME&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we did two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We saved the environment configuration. You can list your saved configurations by running &lt;code&gt;eb config list&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We created a snapshot of the database.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point we can terminate our environment by calling &lt;code&gt;eb terminate&lt;/code&gt;. And that's it - Amazon is not charging you anymore - your EC2 instance, RDS instance, load balancers, etc. are down. I don't have a load balancer, but I can verify that everything else is gone.&lt;/p&gt;
&lt;p&gt;You should now commit your configs to your source control so that you have them saved when you come back.&lt;/p&gt;
&lt;p&gt;Now, your application is sitting safely saved for a while and you decide to restore it.&lt;/p&gt;
&lt;h2&gt;Restoring your environment.&lt;/h2&gt;
&lt;p&gt;If you have deleted your application, you'll need to run &lt;code&gt;eb init&lt;/code&gt;. After that, we'll run the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create environment. It&amp;#39;s important to specify a cname, so that we don&amp;#39;t have to&lt;/span&gt;
&lt;span class="c1"&gt;# change our DNS config. This takes a lot of time, so I bump the timeout.&lt;/span&gt;
&lt;span class="c1"&gt;# This command will print the name of your new database instance.&lt;/span&gt;
&lt;span class="nb"&gt;time&lt;/span&gt; eb create neatlinks-dev --cfg &lt;span class="nv"&gt;$EB_CONFIG&lt;/span&gt; --cname &lt;span class="nv"&gt;$EB_CNAME&lt;/span&gt; --timeout 30

&lt;span class="c1"&gt;# Get this id from the printed output of &amp;quot;eb create&amp;quot;.&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;EB_NEW_DB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aa1q3no37rzd407&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Delete DB instance. We&amp;#39;ll replace it with the snapshot.&lt;/span&gt;
aws rds delete-db-instance --db-instance-identifier &lt;span class="nv"&gt;$EB_NEW_DB&lt;/span&gt; --skip-final-snapshot
aws rds &lt;span class="nb"&gt;wait&lt;/span&gt; db-instance-deleted --db-instance-identifier &lt;span class="nv"&gt;$EB_NEW_DB&lt;/span&gt;

&lt;span class="c1"&gt;# Restore from snapshot.&lt;/span&gt;
aws rds restore-db-instance-from-db-snapshot &lt;span class="se"&gt;\&lt;/span&gt;
        --db-instance-identifier &lt;span class="nv"&gt;$EB_NEW_DB&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --db-snapshot-identifier &lt;span class="nv"&gt;$EB_SNAPSHOT_NAME&lt;/span&gt;
aws rds &lt;span class="nb"&gt;wait&lt;/span&gt; db-instance-available --db-instance-identifier &lt;span class="nv"&gt;$EB_NEW_DB&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your production setup is ready now! Your application probably won't work though, because your DB endpoint is different. Edit your source code or your own configuration files so that your application connects to the new database. Once done, call &lt;code&gt;eb deploy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That's it. Your application should be running now. You can use this procedure to rename your Elastic Beanstalk application and environment as well, which is a feature that's missing from the &lt;code&gt;eb&lt;/code&gt; CLI app.&lt;/p&gt;</summary></entry><entry><title>What happens when you run out of memory in Linux?</title><link href="http://pminkov.github.io/blog/what-happens-when-you-run-out-of-memory-in-linux.html" rel="alternate"></link><published>2017-01-15T12:50:00-08:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2017-01-15:blog/what-happens-when-you-run-out-of-memory-in-linux.html</id><summary type="html">&lt;p&gt;I've always been curious to figure out what happens when you run out of memory in Linux and recently I was experimenting with something that helped me figure it out. &lt;/p&gt;
&lt;p&gt;I was trying out &lt;a href="http://dhbox.org/"&gt;dhbox&lt;/a&gt; deployment on an EC2 machine. dhbox allows you to start a virtual environment in which you can try out various data science tools. These virtual environments are run on Docker containers. These Docker containers take a lot of memory, so you can't run too many on a single machine. So far so good. But let's see what actually happens.&lt;/p&gt;
&lt;p&gt;Before we start, &lt;a href="http://techblog.netflix.com/2015/11/linux-performance-analysis-in-60s.html"&gt;here&lt;/a&gt; is a great document from the Netflix Eng blog that describes the tools that can be used to debug a slow Linux box. &lt;/p&gt;
&lt;p&gt;I deployed DHBox on an Ubuntu image in EC2 with 1GB of memory and no swap file. Yes, no swap file. Why? It seems like that's done, because having a swap file might incur a lot of EBS IO, which leads to high pricing. But still, this makes for an interesting debugging scenario, so let's continue.&lt;/p&gt;
&lt;p&gt;Here's what our free memory situation is in the beginnging:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ free -m
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;990&lt;/span&gt;          &lt;span class="m"&gt;78&lt;/span&gt;         &lt;span class="m"&gt;518&lt;/span&gt;           &lt;span class="m"&gt;4&lt;/span&gt;         &lt;span class="m"&gt;392&lt;/span&gt;         867
Swap:             &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice how we have 392MB in "buff/cache". What is this? &lt;a href="http://www.tldp.org/LDP/sag/html/buffer-cache.html"&gt;Here&lt;/a&gt; is a good explanation of it. The buffer cache is caching (in RAM) data that's on disk. For example, the "ls" command, or the glibc library are things that are often used and are good candidates for caching.&lt;/p&gt;
&lt;p&gt;The first thing I do is to start the Python web app for DHBox. It's a simple Flask app running on &lt;a href="http://gunicorn.org/"&gt;gunicorn&lt;/a&gt;. After I start it, this is what &lt;code&gt;free&lt;/code&gt; is showing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ free -m
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;990&lt;/span&gt;         &lt;span class="m"&gt;127&lt;/span&gt;         &lt;span class="m"&gt;453&lt;/span&gt;           &lt;span class="m"&gt;4&lt;/span&gt;         &lt;span class="m"&gt;410&lt;/span&gt;         818
Swap:             &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reasonable. We are using a bit more memory, we have cached a bit more data from disk.&lt;/p&gt;
&lt;p&gt;Now, I'll start running vmstat and run four virtual labs. This seems to be enough to take 1GB of memory and pretty much bring down the machine. One other tool we're going to use is &lt;code&gt;vmstat&lt;/code&gt;. &lt;code&gt;vmstat&lt;/code&gt; is great, it's outputting a lot of useful information. Let's see how it looks like before we start running the Docker containers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vmstat 5
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;463880&lt;/span&gt;  &lt;span class="m"&gt;51328&lt;/span&gt; &lt;span class="m"&gt;369012&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;635&lt;/span&gt;    &lt;span class="m"&gt;32&lt;/span&gt;   &lt;span class="m"&gt;94&lt;/span&gt;  &lt;span class="m"&gt;231&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;95&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  1
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;463356&lt;/span&gt;  &lt;span class="m"&gt;51336&lt;/span&gt; &lt;span class="m"&gt;369044&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;2&lt;/span&gt;   &lt;span class="m"&gt;36&lt;/span&gt;   &lt;span class="m"&gt;68&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;462884&lt;/span&gt;  &lt;span class="m"&gt;51372&lt;/span&gt; &lt;span class="m"&gt;369116&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;14&lt;/span&gt;     &lt;span class="m"&gt;2&lt;/span&gt;   &lt;span class="m"&gt;46&lt;/span&gt;   &lt;span class="m"&gt;69&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;462380&lt;/span&gt;  &lt;span class="m"&gt;51372&lt;/span&gt; &lt;span class="m"&gt;369116&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;43&lt;/span&gt;  &lt;span class="m"&gt;101&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The telling part here is the &lt;code&gt;id&lt;/code&gt; column. That's the percentage which the CPU spends being idle. As you can see, the CPU is pretty idle. Not much to do.&lt;/p&gt;
&lt;p&gt;We're then starting the first Docker container. Things spike up for a while. Let's observe vmstat:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;462380&lt;/span&gt;  &lt;span class="m"&gt;51372&lt;/span&gt; &lt;span class="m"&gt;369116&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;43&lt;/span&gt;  &lt;span class="m"&gt;101&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  0
&lt;span class="c1"&gt;# Here&amp;#39;s when we start the Docker container.&lt;/span&gt;
 &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;185252&lt;/span&gt;  &lt;span class="m"&gt;56072&lt;/span&gt; &lt;span class="m"&gt;497736&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;9159&lt;/span&gt;  &lt;span class="m"&gt;8016&lt;/span&gt; &lt;span class="m"&gt;2126&lt;/span&gt; &lt;span class="m"&gt;7829&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;43&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;  0
 &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;95416&lt;/span&gt;  &lt;span class="m"&gt;56576&lt;/span&gt; &lt;span class="m"&gt;525740&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;1924&lt;/span&gt;  &lt;span class="m"&gt;1036&lt;/span&gt;  &lt;span class="m"&gt;396&lt;/span&gt; &lt;span class="m"&gt;1467&lt;/span&gt; &lt;span class="m"&gt;51&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;  &lt;span class="m"&gt;7&lt;/span&gt;  0
 &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;147764&lt;/span&gt;  &lt;span class="m"&gt;56616&lt;/span&gt; &lt;span class="m"&gt;527408&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;336&lt;/span&gt;   &lt;span class="m"&gt;630&lt;/span&gt;  &lt;span class="m"&gt;117&lt;/span&gt;  &lt;span class="m"&gt;307&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;96&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;65604&lt;/span&gt;  &lt;span class="m"&gt;56664&lt;/span&gt; &lt;span class="m"&gt;537452&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;82&lt;/span&gt;   &lt;span class="m"&gt;81&lt;/span&gt;  &lt;span class="m"&gt;494&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;94&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;65556&lt;/span&gt;  &lt;span class="m"&gt;56676&lt;/span&gt; &lt;span class="m"&gt;537500&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;59&lt;/span&gt;   &lt;span class="m"&gt;59&lt;/span&gt;  &lt;span class="m"&gt;181&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;65524&lt;/span&gt;  &lt;span class="m"&gt;56684&lt;/span&gt; &lt;span class="m"&gt;537504&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;58&lt;/span&gt;   &lt;span class="m"&gt;56&lt;/span&gt;  &lt;span class="m"&gt;179&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;65400&lt;/span&gt;  &lt;span class="m"&gt;56692&lt;/span&gt; &lt;span class="m"&gt;537552&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;4928&lt;/span&gt;  &lt;span class="m"&gt;138&lt;/span&gt;  &lt;span class="m"&gt;231&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;98&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;65400&lt;/span&gt;  &lt;span class="m"&gt;56700&lt;/span&gt; &lt;span class="m"&gt;537552&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;3187&lt;/span&gt;  &lt;span class="m"&gt;107&lt;/span&gt;  &lt;span class="m"&gt;201&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;98&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;  0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Interesting. As you can see the &lt;code&gt;id&lt;/code&gt; column value decreases. Less idleness, we're starting things. But after a while, the Docker container has started and we're back to things being quiet.&lt;/p&gt;
&lt;p&gt;Let's see what &lt;code&gt;free&lt;/code&gt; is saying:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ free -m
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;990&lt;/span&gt;         &lt;span class="m"&gt;350&lt;/span&gt;          &lt;span class="m"&gt;59&lt;/span&gt;          &lt;span class="m"&gt;10&lt;/span&gt;         &lt;span class="m"&gt;580&lt;/span&gt;         569
Swap:             &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, &lt;code&gt;used&lt;/code&gt; went up from 127MB to 350MB. The buffer cache also went up. Less available memory.&lt;/p&gt;
&lt;p&gt;Let's start the second Docker container. We're looking at vmstat again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;61304&lt;/span&gt;  &lt;span class="m"&gt;56740&lt;/span&gt; &lt;span class="m"&gt;537872&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;56&lt;/span&gt;   &lt;span class="m"&gt;83&lt;/span&gt;  &lt;span class="m"&gt;227&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  0
&lt;span class="c1"&gt;# Starting second container here.&lt;/span&gt;
 &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;126516&lt;/span&gt;  &lt;span class="m"&gt;59292&lt;/span&gt; &lt;span class="m"&gt;341252&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;7109&lt;/span&gt;  &lt;span class="m"&gt;8100&lt;/span&gt;  &lt;span class="m"&gt;823&lt;/span&gt; &lt;span class="m"&gt;3255&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;56&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;  0
 &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;47572&lt;/span&gt;  &lt;span class="m"&gt;59904&lt;/span&gt; &lt;span class="m"&gt;337152&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;9186&lt;/span&gt;  &lt;span class="m"&gt;7515&lt;/span&gt;  &lt;span class="m"&gt;882&lt;/span&gt; &lt;span class="m"&gt;2316&lt;/span&gt; &lt;span class="m"&gt;51&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;153212&lt;/span&gt;  &lt;span class="m"&gt;59940&lt;/span&gt; &lt;span class="m"&gt;307720&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;1094&lt;/span&gt;  &lt;span class="m"&gt;2122&lt;/span&gt;  &lt;span class="m"&gt;214&lt;/span&gt;  &lt;span class="m"&gt;557&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;92&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;92848&lt;/span&gt;  &lt;span class="m"&gt;59996&lt;/span&gt; &lt;span class="m"&gt;303368&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;556&lt;/span&gt;   &lt;span class="m"&gt;149&lt;/span&gt;  &lt;span class="m"&gt;147&lt;/span&gt;  &lt;span class="m"&gt;690&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;93&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;92848&lt;/span&gt;  &lt;span class="m"&gt;60004&lt;/span&gt; &lt;span class="m"&gt;303368&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;108&lt;/span&gt;   &lt;span class="m"&gt;91&lt;/span&gt;  &lt;span class="m"&gt;311&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;92724&lt;/span&gt;  &lt;span class="m"&gt;60012&lt;/span&gt; &lt;span class="m"&gt;303376&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;102&lt;/span&gt;   &lt;span class="m"&gt;94&lt;/span&gt;  &lt;span class="m"&gt;326&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;98&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;88296&lt;/span&gt;  &lt;span class="m"&gt;60028&lt;/span&gt; &lt;span class="m"&gt;305048&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;320&lt;/span&gt;   &lt;span class="m"&gt;102&lt;/span&gt;  &lt;span class="m"&gt;147&lt;/span&gt;  &lt;span class="m"&gt;424&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;96&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;77228&lt;/span&gt;  &lt;span class="m"&gt;60364&lt;/span&gt; &lt;span class="m"&gt;314520&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;1876&lt;/span&gt;   &lt;span class="m"&gt;144&lt;/span&gt;  &lt;span class="m"&gt;306&lt;/span&gt;  &lt;span class="m"&gt;868&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;86800&lt;/span&gt;  &lt;span class="m"&gt;60372&lt;/span&gt; &lt;span class="m"&gt;304968&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;26&lt;/span&gt;   &lt;span class="m"&gt;387&lt;/span&gt;  &lt;span class="m"&gt;111&lt;/span&gt;  &lt;span class="m"&gt;372&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;97&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;86032&lt;/span&gt;  &lt;span class="m"&gt;60780&lt;/span&gt; &lt;span class="m"&gt;305120&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;110&lt;/span&gt;   &lt;span class="m"&gt;119&lt;/span&gt;  &lt;span class="m"&gt;150&lt;/span&gt;  &lt;span class="m"&gt;399&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;98&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;  0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similar situation. A spike in io, a spike in non-idle CPU percentage, followed by quiet. Let's look at &lt;code&gt;free&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ free -m
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;990&lt;/span&gt;         &lt;span class="m"&gt;549&lt;/span&gt;          &lt;span class="m"&gt;84&lt;/span&gt;          &lt;span class="m"&gt;17&lt;/span&gt;         &lt;span class="m"&gt;356&lt;/span&gt;         371
Swap:             &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More used memory. But notice how this time the &lt;code&gt;buff/cache&lt;/code&gt; section went down. Why? Well, because our running processes are using more memory and this memory has to come from somewhere. The kernel is freeing memory from the buffer cache and giving it to processes. Again, reasonable behavior.&lt;/p&gt;
&lt;p&gt;Let's start the third and fourth Docker containers and see how &lt;code&gt;vmstat&lt;/code&gt; looks after that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;46052&lt;/span&gt;  &lt;span class="m"&gt;11188&lt;/span&gt; &lt;span class="m"&gt;160564&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;151&lt;/span&gt;  &lt;span class="m"&gt;153&lt;/span&gt;  &lt;span class="m"&gt;532&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;97&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;39828&lt;/span&gt;  &lt;span class="m"&gt;11336&lt;/span&gt; &lt;span class="m"&gt;166664&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;1246&lt;/span&gt;   &lt;span class="m"&gt;141&lt;/span&gt;  &lt;span class="m"&gt;235&lt;/span&gt;  &lt;span class="m"&gt;634&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;95&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;39704&lt;/span&gt;  &lt;span class="m"&gt;11344&lt;/span&gt; &lt;span class="m"&gt;166664&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;149&lt;/span&gt;  &lt;span class="m"&gt;158&lt;/span&gt;  &lt;span class="m"&gt;542&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;97&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;  0
&lt;span class="c1"&gt;# After we start the fourth container.&lt;/span&gt;
 &lt;span class="m"&gt;6&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;18840&lt;/span&gt;  &lt;span class="m"&gt;11668&lt;/span&gt; &lt;span class="m"&gt;179484&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;18678&lt;/span&gt;  &lt;span class="m"&gt;7726&lt;/span&gt; &lt;span class="m"&gt;2711&lt;/span&gt; &lt;span class="m"&gt;7721&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;46&lt;/span&gt; &lt;span class="m"&gt;41&lt;/span&gt;  0
 &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;8964&lt;/span&gt;   &lt;span class="m"&gt;2796&lt;/span&gt; &lt;span class="m"&gt;103108&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;38137&lt;/span&gt;  &lt;span class="m"&gt;2508&lt;/span&gt; &lt;span class="m"&gt;4198&lt;/span&gt; &lt;span class="m"&gt;4872&lt;/span&gt; &lt;span class="m"&gt;37&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;41&lt;/span&gt;  1
 &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;9576&lt;/span&gt;    &lt;span class="m"&gt;588&lt;/span&gt; &lt;span class="m"&gt;101548&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;68988&lt;/span&gt;   &lt;span class="m"&gt;485&lt;/span&gt; &lt;span class="m"&gt;4097&lt;/span&gt; &lt;span class="m"&gt;6006&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;88&lt;/span&gt;  0
 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;9352&lt;/span&gt;    &lt;span class="m"&gt;152&lt;/span&gt; &lt;span class="m"&gt;100752&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;67797&lt;/span&gt;   &lt;span class="m"&gt;250&lt;/span&gt; &lt;span class="m"&gt;2463&lt;/span&gt; &lt;span class="m"&gt;4497&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;90&lt;/span&gt;  1

....


 &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;9508&lt;/span&gt;    &lt;span class="m"&gt;248&lt;/span&gt; &lt;span class="m"&gt;100560&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;63568&lt;/span&gt;   &lt;span class="m"&gt;138&lt;/span&gt; &lt;span class="m"&gt;1700&lt;/span&gt; &lt;span class="m"&gt;3935&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;91&lt;/span&gt;  1
 &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;8656&lt;/span&gt;    &lt;span class="m"&gt;400&lt;/span&gt; &lt;span class="m"&gt;100436&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;63154&lt;/span&gt;    &lt;span class="m"&gt;68&lt;/span&gt; &lt;span class="m"&gt;1580&lt;/span&gt; &lt;span class="m"&gt;3766&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;91&lt;/span&gt;  1
 &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;8852&lt;/span&gt;    &lt;span class="m"&gt;288&lt;/span&gt; &lt;span class="m"&gt;100552&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;63711&lt;/span&gt;   &lt;span class="m"&gt;128&lt;/span&gt; &lt;span class="m"&gt;1606&lt;/span&gt; &lt;span class="m"&gt;3705&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;92&lt;/span&gt;  1
 &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;47&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;10232&lt;/span&gt;    &lt;span class="m"&gt;372&lt;/span&gt;  &lt;span class="m"&gt;98616&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;63410&lt;/span&gt;    &lt;span class="m"&gt;94&lt;/span&gt; &lt;span class="m"&gt;1720&lt;/span&gt; &lt;span class="m"&gt;4316&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;7&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;91&lt;/span&gt;  1
 &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;9648&lt;/span&gt;    &lt;span class="m"&gt;420&lt;/span&gt;  &lt;span class="m"&gt;99604&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;63126&lt;/span&gt;    &lt;span class="m"&gt;77&lt;/span&gt; &lt;span class="m"&gt;1696&lt;/span&gt; &lt;span class="m"&gt;4425&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;91&lt;/span&gt;  1
 &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;40&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;10028&lt;/span&gt;    &lt;span class="m"&gt;272&lt;/span&gt;  &lt;span class="m"&gt;99432&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;63692&lt;/span&gt;    &lt;span class="m"&gt;74&lt;/span&gt; &lt;span class="m"&gt;1681&lt;/span&gt; &lt;span class="m"&gt;4506&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;7&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;91&lt;/span&gt;  1
 &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;75&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;9944&lt;/span&gt;    &lt;span class="m"&gt;160&lt;/span&gt;  &lt;span class="m"&gt;98220&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;63342&lt;/span&gt;    &lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="m"&gt;1724&lt;/span&gt; &lt;span class="m"&gt;5150&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;89&lt;/span&gt;  1
 &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;34&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;8952&lt;/span&gt;    &lt;span class="m"&gt;296&lt;/span&gt; &lt;span class="m"&gt;100400&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;63575&lt;/span&gt;   &lt;span class="m"&gt;110&lt;/span&gt; &lt;span class="m"&gt;1958&lt;/span&gt; &lt;span class="m"&gt;4663&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;91&lt;/span&gt;  1
 &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;9004&lt;/span&gt;   &lt;span class="m"&gt;1716&lt;/span&gt; &lt;span class="m"&gt;117640&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;62704&lt;/span&gt;   &lt;span class="m"&gt;123&lt;/span&gt; &lt;span class="m"&gt;2674&lt;/span&gt; &lt;span class="m"&gt;5329&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;88&lt;/span&gt;  1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where things start to get bad! The box becomes very unresponsive. Typing a simple command like &lt;code&gt;ls&lt;/code&gt; takes seconds to execute. Let's take a peek at &lt;code&gt;free&lt;/code&gt; and we'll continue to our analysis after that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ free -m
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;990&lt;/span&gt;         &lt;span class="m"&gt;851&lt;/span&gt;          &lt;span class="m"&gt;20&lt;/span&gt;          &lt;span class="m"&gt;24&lt;/span&gt;         &lt;span class="m"&gt;119&lt;/span&gt;          54
Swap:             &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, we barely have any free memory and the buffer cache has shrunk even more. But notice what's going on in &lt;code&gt;vmstat&lt;/code&gt;. The &lt;code&gt;bi&lt;/code&gt; (blocks received from a block device) is stuck at a constant high value. This means we're doing a lot of disk reads. Why is that, are our processes doing a lot of disk operations? No. Our many processes are executables that are located on disk. When the kernel executes them, it has to read instructions. If we have enough buffer cache, we can store these instruction in memory and not have to read them again. However, our buffer cache is small now. So when processes run, the kernel needs to pull their instructions from disk. It probably stores them in the buffer cache, but when the next process is running, it tries to store in the cache again and evicts what's stored from the old process. &lt;/p&gt;
&lt;p&gt;Are we done? Not yet. When this whole sad mess happens, the kernel will run something called &lt;a href="https://linux-mm.org/OOM_Killer"&gt;OOM killer&lt;/a&gt;. How do we know this is what's going on? We can use &lt;code&gt;dmesg&lt;/code&gt; and view the system messages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ dmesg &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;Out of memory&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; 3635.537538&lt;span class="o"&gt;]&lt;/span&gt; Out of memory: Kill process &lt;span class="m"&gt;21580&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;jupyter-noteboo&lt;span class="o"&gt;)&lt;/span&gt; score &lt;span class="m"&gt;37&lt;/span&gt; or sacrifice child
&lt;span class="o"&gt;[&lt;/span&gt; 3636.822607&lt;span class="o"&gt;]&lt;/span&gt; Out of memory: Kill process &lt;span class="m"&gt;22714&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;jupyter-noteboo&lt;span class="o"&gt;)&lt;/span&gt; score &lt;span class="m"&gt;37&lt;/span&gt; or sacrifice child
&lt;span class="o"&gt;[&lt;/span&gt; 3643.006328&lt;span class="o"&gt;]&lt;/span&gt; Out of memory: Kill process &lt;span class="m"&gt;24976&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;jupyter-noteboo&lt;span class="o"&gt;)&lt;/span&gt; score &lt;span class="m"&gt;37&lt;/span&gt; or sacrifice child
&lt;span class="o"&gt;[&lt;/span&gt; 3654.916468&lt;span class="o"&gt;]&lt;/span&gt; Out of memory: Kill process &lt;span class="m"&gt;26118&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;jupyter-noteboo&lt;span class="o"&gt;)&lt;/span&gt; score &lt;span class="m"&gt;37&lt;/span&gt; or sacrifice child
&lt;span class="o"&gt;[&lt;/span&gt; 3658.712286&lt;span class="o"&gt;]&lt;/span&gt; Out of memory: Kill process &lt;span class="m"&gt;28364&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;jupyter-noteboo&lt;span class="o"&gt;)&lt;/span&gt; score &lt;span class="m"&gt;35&lt;/span&gt; or sacrifice child
&lt;span class="o"&gt;[&lt;/span&gt; 3666.654763&lt;span class="o"&gt;]&lt;/span&gt; Out of memory: Kill process &lt;span class="m"&gt;30603&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;jupyter-noteboo&lt;span class="o"&gt;)&lt;/span&gt; score &lt;span class="m"&gt;36&lt;/span&gt; or sacrifice child
&lt;span class="o"&gt;[&lt;/span&gt; 3685.390829&lt;span class="o"&gt;]&lt;/span&gt; Out of memory: Kill process &lt;span class="m"&gt;30620&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;jupyter-noteboo&lt;span class="o"&gt;)&lt;/span&gt; score &lt;span class="m"&gt;36&lt;/span&gt; or sacrifice child
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The strange thing here is that it keeps killing these &lt;a href="http://jupyter.org/"&gt;Jupyter&lt;/a&gt; processes for a long time. My guess here is that something restarts them after they're killed.&lt;/p&gt;
&lt;p&gt;The best thing to do here is to simply kill all the running Docker containers so that the box is usable again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker &lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;docker ps -q&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Things would look different if there was a swap partition on the disk. I might try such a setup as well. If you think about it, the swap would allow some of the memory used by processes to be transferred to disk. That's a great win, because some parts of memory might be very rarely if at all accessed. However, without a swap, there's no such option.&lt;/p&gt;</summary></entry><entry><title>The Cloud Infrastructure Landscape</title><link href="http://pminkov.github.io/blog/the-cloud-infrastructure-landscape.html" rel="alternate"></link><published>2017-01-15T12:10:00-08:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2017-01-15:blog/the-cloud-infrastructure-landscape.html</id><summary type="html">&lt;p&gt;I'm taking a &lt;a href="https://www.edx.org/course/introduction-cloud-infrastructure-linuxfoundationx-lfs151-x"&gt;Cloud Infrastructure&lt;/a&gt; class on EdX and I have found it to be a really nice overview of the cloud space. It's missing anything related to Hadoop and data analytics, but it describes probably all the tools related to running applications in the cloud. Of course, since the class describes so many tools, it can't do so in depth, but you can pick whatever is interesting to you and learn more about it.&lt;/p&gt;
&lt;p&gt;Here's a list of all the tools described in it, which list I might use as a future reference for myself. I'd say that knowing a bit about such a big amount of products definitely helps when you're trying to come up with a cloud infrastructure for a project.&lt;/p&gt;
&lt;p&gt;So, big list, based on the course contents:&lt;/p&gt;
&lt;h3&gt;Virtualization&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.linux-kvm.org/page/Main_Page"&gt;KVM&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.virtualbox.org/wiki/VirtualBox"&gt;VirtualBox&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I use VirtualBox to run Linux on Mac OS X and highly recommend it. Mac OS X is not good if you're trying to learn Linux, too many differences.&lt;/p&gt;
&lt;h3&gt;Infrastructure as a Service (IaaS)&lt;br&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/ec2/"&gt;Amazon EC2&lt;/a&gt;&lt;br&gt;
&lt;a href="https://azure.microsoft.com/en-us/services/virtual-machines/?b=16.51a"&gt;Azure Virtual Machines&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.digitalocean.com/"&gt;Digital Ocean&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cloud.google.com/compute/"&gt;Google Compute Engine&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.openstack.org/"&gt;OpenStack&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I've only tried EC2 out of these, but it's pretty simple and I like the fact that you can do so many things through the UI, it makes it easier to start with it.&lt;/p&gt;
&lt;h3&gt;Platform as a Sevice (PaaS)&lt;br&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.cloudfoundry.org/learn/features/"&gt;Cloud Foundry&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.openshift.com/"&gt;OpenShift&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;&lt;br&gt;
&lt;a href="https://deis.com/"&gt;Deis&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/elasticbeanstalk/"&gt;AWS Elastic Beanstalk&lt;/a&gt; (my addition)&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I've used Elastic Beanstalk and it's a good way to abstract configuration of load balancers, Apache instances and so on.&lt;/p&gt;
&lt;h3&gt;Containers&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://linuxcontainers.org/"&gt;LXC (Linux Containers)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Docker is the leader here. I'm surprised that companies like Google or VMWare haven't come up with their own solution. Maybe soon.&lt;/p&gt;
&lt;h3&gt;Micro OSes for Containers&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.projectatomic.io/"&gt;Atomic Host&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.coreos.com/"&gt;CoreOS&lt;/a&gt;&lt;br&gt;
&lt;a href="https://vmware.github.io/photon/"&gt;VMWare Photon&lt;/a&gt;&lt;br&gt;
&lt;a href="http://rancher.com/rancher-os/"&gt;RancherOS&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Pretty neat concept of building a minimal OS that's targeted towards running containers.&lt;/p&gt;
&lt;h3&gt;Container Orchestration&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.docker.com/products/docker-swarm"&gt;Docker Swarm&lt;/a&gt;&lt;br&gt;
&lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Unikernels&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/emc-advanced-dev/unik"&gt;Unik&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Container as a Service (CaaS)&lt;br&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.docker.com/products/docker-datacenter"&gt;Docker Datacenter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://wiki.openstack.org/wiki/Magnum"&gt;Project Magnum on OpenStack&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Software Defined Storage and Storage Management for Containers&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://ceph.com/"&gt;Ceph&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.gluster.org/"&gt;Gluster&lt;/a&gt;&lt;br&gt;
&lt;a href="https://storpool.com/"&gt;StorPool&lt;/a&gt; (My addition)&lt;br&gt; &lt;/p&gt;
&lt;h3&gt;Continuous Integration / Continuous Delivery&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://jenkins.io/"&gt;Jenkins&lt;/a&gt;&lt;br&gt;
&lt;a href="https://drone.io/"&gt;Drone&lt;/a&gt;&lt;br&gt;
&lt;a href="https://travis-ci.com/getting_started"&gt;Travis CI&lt;/a&gt;&lt;br&gt;
&lt;a href="https://app.shippable.com/"&gt;Shippable&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;These are very easy to try out if you have projects on GitHub. Here's &lt;a href="https://github.com/pminkov/webserver"&gt;one&lt;/a&gt; on which I slapped the Drone badge.&lt;/p&gt;
&lt;h3&gt;Tools for Configuration Management&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.ansible.com/"&gt;Ansible&lt;/a&gt;&lt;br&gt;
&lt;a href="https://puppet.com/"&gt;Puppet&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.saltstack.com/en/latest/"&gt;SaltStack&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.chef.io/"&gt;Chef&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Useful tools for running commands on multiple servers.&lt;/p&gt;
&lt;h3&gt;Build and Release Tools&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.terraform.io/docs/providers/"&gt;Terraform&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bosh.io"&gt;BOSH&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Key-Value Pair Stores&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://coreos.com/etcd/"&gt;etcd&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.consul.io/"&gt;Consul&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Building Images&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.packer.io/"&gt;Packer&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Pretty neat. Just describe your instance and build a VM / Amazon image / Docker container. I can see that being pretty useful when you're building AMIs for AWS. Better than building it manually and not being able to reproduce it on another platform.&lt;/p&gt;
&lt;h3&gt;Debugging, Logging, Monitoring&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.sysdig.com/"&gt;Sysdig&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/google/cadvisor"&gt;cAdvisor&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.fluentd.org/"&gt;Fluentd&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.datadoghq.com/"&gt;Datadog&lt;/a&gt;&lt;br&gt;&lt;/p&gt;</summary></entry><entry><title>How to install collectd on Ubuntu.</title><link href="http://pminkov.github.io/blog/how-to-install-collectd-on-ubuntu.html" rel="alternate"></link><published>2017-01-05T14:46:00-08:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2017-01-05:blog/how-to-install-collectd-on-ubuntu.html</id><summary type="html">&lt;p&gt;Some time ago I found out about &lt;a href="https://collectd.org/"&gt;collectd&lt;/a&gt; and I was curious to see what it does. collectd collects statistics about the machine its running on - cpu, disk, memory, processes, battery, etc. &lt;/p&gt;
&lt;p&gt;Here's how to install it on Ubuntu and visualize the data it has collected.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Step 1: Install the collectd package.&lt;/h3&gt;
&lt;p&gt;Easy, just install the package:&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install collectd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Step 2: Make sure collectd and apache are running.&lt;/h3&gt;
&lt;p&gt;If you have installed apache, you should have both collectd and apache running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo service --status-all &lt;span class="p"&gt;|&lt;/span&gt; egrep &lt;span class="s2"&gt;&amp;quot;collectd|apache2&amp;quot;&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; + &lt;span class="o"&gt;]&lt;/span&gt;  apache2
 &lt;span class="o"&gt;[&lt;/span&gt; + &lt;span class="o"&gt;]&lt;/span&gt;  collectd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If collectd is not running, run &lt;code&gt;sudo service collectd start&lt;/code&gt;. For me at least, it was running after installation.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Step 3: Install collectd's web app for generating graphs.&lt;/h3&gt;
&lt;p&gt;Ok, now we have collectd running. collectd is mostly about collecting data and it allows other frontends to display it. However, it comes with a simple set of cgi scripts that can be used to see some graphs.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;/usr/share/doc/collectd/examples/&lt;/code&gt; directory, you'll find a directory named &lt;code&gt;collection3&lt;/code&gt;. Copy the entire directory to &lt;code&gt;/var/www/html&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo cp -r ./collection3 /var/www/html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Step 4: Enable apache to run CGI scripts.&lt;/h3&gt;
&lt;p&gt;Great, you can now access the cgi scripts by going to this url: &lt;code&gt;http://localhost/collection3/bin/index.cgi&lt;/code&gt;. However, you'll be served a text file, since apache doesn't know to run these cgi scripts. There's is a &lt;a href="http://httpd.apache.org/docs/2.2/howto/cgi.html"&gt;simple manual&lt;/a&gt; explaining cgi scripts in Apache.&lt;/p&gt;
&lt;p&gt;You'll have to do two things.&lt;/p&gt;
&lt;p&gt;First, you need to install the cgi module. So, go to &lt;code&gt;/etc/apache2/mods-enabled&lt;/code&gt; and run this: &lt;code&gt;$ sudo ln -s ../mods-available/cgi.load&lt;/code&gt;. You have now enabled the &lt;code&gt;cgi&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;Next you'll have to change &lt;code&gt;apache2.conf&lt;/code&gt;, located in &lt;code&gt;/etc/apache2&lt;/code&gt; (Ubuntu doesn't use &lt;code&gt;httpd.conf&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Add these lines to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;Directory /var/www/&amp;gt;
        Options +ExecCGI
        AddHandler cgi-script .cgi
&amp;lt;/Directory&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And - you're done! If you go to &lt;code&gt;http://localhost/cgi-bin/collection3/bin/index.cgi&lt;/code&gt;, you should see some graphs.&lt;/p&gt;</summary></entry><entry><title>Thoughts on C programming.</title><link href="http://pminkov.github.io/blog/thoughts-on-c-programming.html" rel="alternate"></link><published>2017-01-01T17:58:00-08:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2017-01-01:blog/thoughts-on-c-programming.html</id><summary type="html">&lt;p&gt;I recently wrote a &lt;a href="https://github.com/pminkov/webserver"&gt;webserver&lt;/a&gt; in C and wanted to share my thoughts on writing code in C. This was practically my first somewhat substantial C project. I've had two jobs in which I was writing C++, but I never programmed in C.&lt;/p&gt;
&lt;p&gt;So, in no particular order, here are my thoughts on C.
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;The language is simple.&lt;/h3&gt;
&lt;p&gt;C is a pretty simple language. Unlike complicated languages like Scala, C has a very limited set of language features. There's a good side to that - you can start faster with C and I appreciate the simplicity coming from working with a more limited language. On the other hand, you have to write more code to do certain things.
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Lack of object oriented programming makes writing code more difficult.&lt;/h3&gt;
&lt;p&gt;It's difficult to organize code when you don't have classes. It seems like your option is to just put pieces of code in separate files if you want to do that. But then, function names will still have to be different. So you end up with a lot of functions containing the name of the type they're supposed to operate on, like maybe &lt;code&gt;add_to_tree&lt;/code&gt; and then &lt;code&gt;remove_from_tree&lt;/code&gt; instead of simple &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; methods on a &lt;code&gt;Tree&lt;/code&gt; class.
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Not knowing the size of arrays and strings in advance is difficult.&lt;/h3&gt;
&lt;p&gt;Unlike C++, C doesn't have its STL library, so if you're allocating arrays or strings, you often have to know their size in advance. Imagine running a process with &lt;code&gt;popen&lt;/code&gt; and having to store its output to a string. You can't know the size of the output in advance, so you have to allocate a buffer of a certain size, expecting it to be big enough in all cases. That's of course impossible, so you'll need to code your own variable size string.&lt;/p&gt;
&lt;p&gt;C library functions are also not immune to this problem. For example, the &lt;code&gt;getcwd&lt;/code&gt; is a function that gets the current working directory. It receives a buffer of a certain size and writes the directory name to it. If the buffer is smaller than the directory name, the function will return NULL.&lt;/p&gt;
&lt;p&gt;Luckily, in a lot of cases, you'd know the size of the data in advance, but writing code that has to do with strings and arrays is still more difficult than just using a STL &lt;code&gt;vector&lt;/code&gt; or a &lt;code&gt;stack&lt;/code&gt;.
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;You have to be meticulous in checking return codes of standard library functions.&lt;/h3&gt;
&lt;p&gt;Most of the functions in the C standard library return something that indicates the success or failure of the function. Unlike languages that have exceptions, if you don't check the return values, it's entirely possible that your code will continue to execute and ignore some errors. Since often times you'll find yourself thinking "I doubt this can fail", writing good C code requires an extra level of discipline.&lt;/p&gt;</summary></entry><entry><title>How to fix order-violation bugs with condition variables.</title><link href="http://pminkov.github.io/blog/how-to-fix-order-violation-bugs-with-condition-variables.html" rel="alternate"></link><published>2016-11-29T11:22:00-08:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-11-29:blog/how-to-fix-order-violation-bugs-with-condition-variables.html</id><summary type="html">&lt;p&gt;Let's look at the following code and try to find the bug in it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Thread 1:
void init() {
  ...
  mThread = PR_CreateThread(mMain, ...)
  ...
}

Thread 2:
void mMain(...) {
  ...
  mState = mThread-&amp;gt;State;
  ...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem is that if thread two executes before thread one, it can access &lt;code&gt;mThread&lt;/code&gt; which is not initialized. We need to make thread two wait for thread one. This is done with condition variables. But let's see how we're going to implement it.&lt;/p&gt;
&lt;h3&gt;Solution 1 (Incorrect) - Simple wait and signal&lt;/h3&gt;
&lt;p&gt;Let's say that we're not giving this a lot of thought and just put a wait and signal in the code. We have this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pthread_mutex_t mtLock = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t mtCond = PTHREAD_COND_INITIALIZER;

Thread 1:
void init() {
  ...
  mThread = PR_CreateThread(mMain, ...)
  pthread_mutex_lock(&amp;amp;mtLock);
  pthread_cond_signal(&amp;amp;mtCond);
  pthread_mutex_unlock(&amp;amp;mtLock);
  ...
}

Thread 2:
void mMain(...) {
  ...
  pthread_mutex_lock(&amp;amp;mtLock);
  pthread_cond_wait(&amp;amp;mtCond, &amp;amp;mtLock);
  pthread_mutex_unlock(&amp;amp;mtLock);
  mState = mThread-&amp;gt;State;
  ...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem here is that thread one can execute before thread two. In this case, thread one will signal on the condition variable, but nobody is waiting on it. Once thread two executes, it will start waiting and nobody is going to signal on the condition variable. Thus, thread two will stay in block state.&lt;/p&gt;
&lt;h3&gt;Solution 2 (Correct) - Using a synchronization variable.&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  pthread_mutex_t mtLock = PTHREAD_MUTEX_INITIALIZER;
  pthread_cond_t mtCond = PTHREAD_COND_INITIALIZER;
  int mtInit = 0;

  Thread 1:
  void init() {
    ...
1   mThread = PR_CreateThread(mMain, ...)
2   pthread_mutex_lock(&amp;amp;mtLock);
3   mtInit = 1;
4   pthread_cond_signal(&amp;amp;mtCond);
5   pthread_mutex_unlock(&amp;amp;mtLock);
    ...
  }

  Thread 2:
  void mMain(...) {
    ...
6   pthread_mutex_lock(&amp;amp;mtLock);
7   if (mtInit == 0)
8     pthread_cond_wait(&amp;amp;mtCond, &amp;amp;mtLock);
9   pthread_mutex_unlock(&amp;amp;mtLock);
10  mState = mThread-&amp;gt;State;
    ...
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we have used the &lt;code&gt;mtInit&lt;/code&gt; variable to prevent the bug in Solution 1 from hapenning. Let's try to reproduce the conditions that led to a bug in out first solution. Let's say thread one executes before thread two. When thread two runs, it will see that &lt;code&gt;mtInit&lt;/code&gt; is 1 and it won't wait. That basically solves our problem. Let's trace things more carfully with two possible scenarios. Of course, there are other possibilities too, but with these two I have enough confidence in the correctness of the solution.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Scenario 1 - Thread 1 before Thread 2.

Line   T1    T2   COMMENT
       1
       2          Locked mutex
             6    Blocked, because mutex is locked.
       3
       4          Signals on the condition variable.
       5          Unblocks mutex.
             6    Continues, mutex was unblocked.
             7    False, jump to line 9.
             9    Unlock mutex, done
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So in this scenario, thread one obtains the lock first and the solution is correct.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Scenario 2 - Thread 2 before Thread 1.

Line   T1    T2   COMMENT
             6    Locked mutex.
             7
             8    Unlocks mutex, waiting on condition variable.
       1      
       2          Locks mutex.
       3      
       4          Signals, but mutex is still locked, so thread two doesn&amp;#39;t do anything.
       5          Unlocks mutex. Now thread two can continue.
             8    Returns from wait(), locks mutex.
             9    Unlocks mutex.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This scenario works too.&lt;/p&gt;
&lt;p&gt;There's one change that we should do though. Instead of an if statement in line 7, we should use a while. Why? Because when thread two wakes up in line 7 and obtains a lock on the mutex, it should re-verify that the condition that made it wait is not true anymore. While not a problem in this code segment, this can be a problem in other cases.&lt;/p&gt;</summary></entry><entry><title>Pitfalls of POSIX condition variables.</title><link href="http://pminkov.github.io/blog/pitfalls-of-posix-condition-variables.html" rel="alternate"></link><published>2016-11-24T20:23:00-08:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-11-24:blog/pitfalls-of-posix-condition-variables.html</id><summary type="html">&lt;p&gt;I'm reading this awesome &lt;a href="http://pages.cs.wisc.edu/~remzi/OSTEP/"&gt;book&lt;/a&gt; about operating systems. I find that with OSs, you can't understand things by just reading the text.
You have to write code, write out things on paper and read certain passages multiple times. That's the difference between learning and reading. Hopefully I'm learning something.&lt;/p&gt;
&lt;p&gt;So this book has a nice chapter on &lt;a href="https://computing.llnl.gov/tutorials/pthreads/#ConditionVariables"&gt;condition variables&lt;/a&gt;. The way condition variables operate is fairly clear, but I found two pitfalls that I had to dig deeper into in order to see what's going on.&lt;/p&gt;
&lt;p&gt;First, a crash course in how condition variables operate. I'm using shortened function names for readability. A condition variable is a variable that you can use to make a thread wait for some condition to be true. So roughly, it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Thread one.
lock(mutex);
wait(condition, mutex);
unlock(mutex);

// Thread two.
lock(mutex);
signal(condition);
unlock(mutex);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's say that the first thing that happens here is that thread one obtains the mutex. Thread two runs and blocks on its call to &lt;code&gt;lock&lt;/code&gt;. Now thread one proceeds and calls &lt;code&gt;wait(condition, mutex)&lt;/code&gt;. What happens here is that mutex is unlocked and thread one goes to sleep. It's waiting for the condition to become true. Thread two is able to obtain the lock and it then signals to thread one that the condition is satisfied. Thread one obtains a lock on the mutex again and finishes its job.&lt;/p&gt;
&lt;p&gt;Now that this is out of the way, let's look at the pitfalls.&lt;/p&gt;
&lt;h4&gt;Pitfall 1&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;When a thread signals a condition, if the thread holds a lock on the mutex, a waiting thread returns from &lt;code&gt;wait()&lt;/code&gt; only after the first thread unlocks the mutex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at our example, intuitively it looks like when we call &lt;code&gt;signal()&lt;/code&gt;, the first thread should return from wait. After all, the signal has been sent. But that's not the case. If thread two has more work to do after the signal, all of this will be done and just once &lt;code&gt;unlock()&lt;/code&gt; is called, that's when thread one will return from the wait.
Thread one will then lock the mutex and once it's done with its work, it will unlock it. This is way more logical than the mess that would happen if &lt;code&gt;signal()&lt;/code&gt; makes &lt;code&gt;wait()&lt;/code&gt; return immediately.&lt;/p&gt;
&lt;h4&gt;Pitfall 2&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Calling &lt;code&gt;signal()&lt;/code&gt; doesn't necessarily unblock all threads waiting on this signal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well this one caused me to scratch my head when I was going through one of the exercises in the book. I assumed a call to &lt;code&gt;signal()&lt;/code&gt; simply unblocks all the waiting threads. No, it possibly unblocks only one of them. Apparently there's a &lt;code&gt;pthread_cond_broadcast&lt;/code&gt; &lt;a href="https://linux.die.net/man/3/pthread_cond_signal"&gt;function&lt;/a&gt; that can unblock all waiting threads.&lt;/p&gt;
&lt;p&gt;So that's it. Happy coding.&lt;/p&gt;</summary><category term="Concurrency"></category></entry><entry><title>Implementing a fast multi-threaded counter.</title><link href="http://pminkov.github.io/blog/implementing-a-fast-multi-threaded-counter.html" rel="alternate"></link><published>2016-11-23T11:02:00-08:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-11-23:blog/implementing-a-fast-multi-threaded-counter.html</id><summary type="html">&lt;p&gt;Today I'll write a bit about implementing a simple thread safe counter and improving its speed.&lt;/p&gt;
&lt;p&gt;Implementing a basic mutli-threaded counter is a fairly easy task. Using pthreads, you just need to wrap the counter increment in a lock.&lt;/p&gt;
&lt;p&gt;The code (&lt;a href="https://github.com/pminkov/wip/tree/master/mt-counters"&gt;github link&lt;/a&gt;) looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;mythreads.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;counter_t&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;pthread_mutex_t&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;counter_t&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;counter_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;pthread_mutex_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;increment_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;counter_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Pthread_mutex_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Pthread_mutex_unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;counter_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;increment_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;counter_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Pthread_mutex_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Pthread_mutex_unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nothing complicated. Let's say that we want to increment this counter 1,000,000 times. And let's do this with an increasing amount of threads, each thread incrementing the counter 1,000,000 times. I get the following timings for this exercise.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1 thread:  0.064s real time.
2 threads: 9.930s
4 threads: 23.971s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This counter is really slow. Also, it doesn't scale well, since at the moment more than one thread starts to use it, it becomes so much slower. Why is this? Well, it's a bit difficult to tell without knowing how mutexes are implemented, but since we're using a single mutex that has to switch between two threads, it looks like there's a lot of overhead in this. The core operation - the increment, is also not parallel, since it can be done by only one thread at a time. But judging from the single threaded timing, this operation by itself is not the bottleneck here. So the synchronization must be.&lt;/p&gt;
&lt;p&gt;How can we improve this? We can use what's called a sloppy counter. The sloppy counter is also fairly easy to understand. Each thread has its own counter and when that counter becomes bigger than a certain value, its current value is transferred into a global counter. Here's how the code for that looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define min(a, b) ((a) &amp;lt; (b) ? (a) : (b))&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="n"&gt;SLOTS_COUNT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sloppy_counter_t&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;counter_t&lt;/span&gt; &lt;span class="n"&gt;gcounter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// A hash table for per-thread counters. Since we&amp;#39;re unlikely to run too many threads at the same time,&lt;/span&gt;
  &lt;span class="c1"&gt;// chances for collision are low. If that&amp;#39;s not the case, we can always use a per-counter mutex.&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lcounters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SLOTS_COUNT&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sloppy_counter_t&lt;/span&gt; &lt;span class="n"&gt;sloppy_counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sloppy_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sloppy_counter_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;SLOTS_COUNT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lcounters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gcounter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;slot_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pthread_t&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="n"&gt;ptid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ptid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptid&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptid&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;SLOTS_COUNT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sloppy_increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sloppy_counter_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pthread_t&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slot_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lcounters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lcounters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;increment_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gcounter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lcounters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lcounters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sloppy_flush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sloppy_counter_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pthread_t&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slot_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lcounters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;increment_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gcounter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lcounters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;sloppy_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sloppy_counter_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gcounter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's time this counter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1 thread:  0.026s
2 threads: 0.050s
4 threads: 0.164s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Much better! This counter, just like the first one, is thread safe. It's not as accurate, but the inaccuracy is small (at most 128 * number of threads) and we can use the flush function if we want accurate counts.&lt;/p&gt;</summary><category term="Concurrency"></category><category term="Linux"></category></entry><entry><title>Monitoring Disk I/O on Linux.</title><link href="http://pminkov.github.io/blog/monitoring-disk-io-on-linux.html" rel="alternate"></link><published>2016-11-16T14:59:00-08:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-11-16:blog/monitoring-disk-io-on-linux.html</id><summary type="html">&lt;p&gt;Today I wrote a little piece of code that generates a random array of numbers, stores it into disk and sorts it on disk, using bubble sort. This uses O(1) memory, but it's obviously very slow. I did this for fun mostly. The code is &lt;a href="https://github.com/pminkov/wip/blob/master/os/disksort.c"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wanted to know, if I'm running this code, what Linux tools are going to show an increase in disk I/O.&lt;/p&gt;
&lt;p&gt;So, I run this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./disksort 150000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This starts the sorting. It takes a long time to sort 150k numbers on disk, at least with that algorithm.&lt;/p&gt;
&lt;p&gt;So the first command that we can run is &lt;code&gt;iostat&lt;/code&gt;. Let's see what it is outputting before I start &lt;code&gt;disksort&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo iostat &lt;span class="m"&gt;5&lt;/span&gt; 2
Linux 4.4.0-31-generic &lt;span class="o"&gt;(&lt;/span&gt;petko-VirtualBox&lt;span class="o"&gt;)&lt;/span&gt;       11/16/2016      _x86_64_        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; CPU&lt;span class="o"&gt;)&lt;/span&gt;

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          14.68    0.19   38.34    0.05    0.00   46.73

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
sda               5.60        83.17        63.96     &lt;span class="m"&gt;539970&lt;/span&gt;     415252

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           3.03    0.00    0.00    0.00    0.00   96.97

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
sda               0.00         0.00         0.00          &lt;span class="m"&gt;0&lt;/span&gt;          0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command line invocation is a bit strange. The &lt;code&gt;5 2&lt;/code&gt; part says "aggregate IO data for five seconds and show me two reports". The idea is that you can get continuous report output every five seconds. But I need only one report. The first one is a default one, which shows aggregated data for I'm not sure what period. But the second one is interesting. Notice &lt;code&gt;kB_read/s&lt;/code&gt; and &lt;code&gt;kB_wrtn/s&lt;/code&gt;. They're zeros. So it's all quiet. I now run &lt;code&gt;disksort&lt;/code&gt; and run the same command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ iostat &lt;span class="m"&gt;5&lt;/span&gt; 2
Linux 4.4.0-31-generic &lt;span class="o"&gt;(&lt;/span&gt;petko-VirtualBox&lt;span class="o"&gt;)&lt;/span&gt;       11/16/2016      _x86_64_        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; CPU&lt;span class="o"&gt;)&lt;/span&gt;

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          15.32    0.17   40.33    0.05    0.00   44.14

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
sda               5.04        73.65        59.42     &lt;span class="m"&gt;540254&lt;/span&gt;     435868

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          26.81    0.00   73.19    0.00    0.00    0.00

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
sda               0.80         0.00       157.64          &lt;span class="m"&gt;0&lt;/span&gt;        588
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice how &lt;code&gt;kB_wrtn/s&lt;/code&gt; spiked up. &lt;code&gt;kB_read&lt;/code&gt; is zero and I assume that's because of the &lt;a href="http://www.tldp.org/LDP/sag/html/buffer-cache.html"&gt;buffer cache&lt;/a&gt;. After all, I'm reading the same file again and again.&lt;/p&gt;
&lt;p&gt;Another command that we can use is &lt;code&gt;iotop&lt;/code&gt;. &lt;code&gt;iotop&lt;/code&gt; is similar to &lt;code&gt;top&lt;/code&gt;, but shows I/O stats. We'll run it using &lt;code&gt;iotop -oa&lt;/code&gt;. The &lt;code&gt;-o&lt;/code&gt; parameter makes it show only processes that do I/O. The &lt;code&gt;-a&lt;/code&gt; flag aggregates the data during the time this command is running. So after running it for a few seconds I'm seeing this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Total DISK READ :       0.00 B/s | Total DISK WRITE :      83.77 K/s
Actual DISK READ:       0.00 B/s | Actual DISK WRITE:       0.00 B/s
  TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&amp;gt;    COMMAND                                                                                                                                                       
  545 be/3 root          0.00 B      4.00 K  0.00 %  0.08 % [jbd2/sda1-8]
 7717 be/4 root          0.00 B      0.00 B  0.00 %  0.01 % [kworker/u2:3]
 7865 be/4 root          0.00 B      0.00 B  0.00 %  0.01 % [kworker/u2:1]
 7714 be/4 petko         0.00 B   1144.00 K  0.00 %  0.00 % ./disksort 150000
 7097 be/4 root          0.00 B      0.00 B  0.00 %  0.00 % [kworker/u2:2]
 7758 be/4 root          0.00 B      0.00 B  0.00 %  0.00 % [kworker/u2:0]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice how &lt;code&gt;disksort&lt;/code&gt; with pid of &lt;code&gt;7714&lt;/code&gt; is well ahead of everything else shown.&lt;/p&gt;
&lt;p&gt;So that's it, happy debugging.&lt;/p&gt;</summary></entry><entry><title>Using pandas to read a table from an HTML page.</title><link href="http://pminkov.github.io/blog/using-pandas-to-read-a-table-from-an-html-page.html" rel="alternate"></link><published>2016-10-31T13:56:00-07:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-10-31:blog/using-pandas-to-read-a-table-from-an-html-page.html</id><summary type="html">&lt;p&gt;Today I wanted to write a bit of simple code to try out a hypothesis I had about stock prices. I found historical data at &lt;a href="http://www.multpl.com/s-p-500-historical-prices/table/by-year"&gt;multpl.com&lt;/a&gt;. At first I thought I'd have to write my own code using Python's &lt;a href="https://docs.python.org/2/library/htmlparser.html"&gt;HTMLParser&lt;/a&gt;. As much as I like to write code, I decided to save myself some time and find something that already does this. To my surprise, &lt;a href="http://pandas.pydata.org/"&gt;pandas&lt;/a&gt;, already has a &lt;a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_html.html"&gt;function&lt;/a&gt; that reads data from HTML tables. Great. Let's see how it works.&lt;/p&gt;
&lt;p&gt;First, I installed pandas, lxml and a bunch of other requirements in a &lt;a href="http://pminkov.github.io/why-i-always-use-virtualenv-to-try-out-new-libraries.html"&gt;virtual environment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To read the tables from the webpage, I used the following lines of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="n"&gt;tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.multpl.com/s-p-500-historical-prices/table/by-month&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;header&lt;/code&gt; parameter, says that we should use the first row in a table as the dataframe's column names. Spefically for this table, one of the columns was getting a somewhat wrong name, but it was easy to fix it with this line of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There we go, we have read historical stock prices into a pandas dataframe. To iterate and print them, we can do it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterrows&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>What I learned from reading Dive into Python.</title><link href="http://pminkov.github.io/blog/what-i-learned-from-reading-dive-into-python.html" rel="alternate"></link><published>2016-06-15T09:57:00-07:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-06-15:blog/what-i-learned-from-reading-dive-into-python.html</id><summary type="html">&lt;p&gt;I recently started reading &lt;a href="http://www.diveintopython.net/toc/index.html"&gt;Dive into Python&lt;/a&gt;. I've been meaning to fill some gaps in my Python knowledge, since I've used the language for about ten years, but feel like I have just picked whatever parts I needed to do my work and don't have a very solid base.&lt;/p&gt;
&lt;p&gt;I'll summarize some of the new things I learned from this book:&lt;/p&gt;
&lt;h3&gt;Chapter 2 (Your First Python Program)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sys.path&lt;/code&gt; contains the list of directories that Python uses to lookup module imports.&lt;/li&gt;
&lt;li&gt;One use of the &lt;code&gt;__name__&lt;/code&gt; attribute is to write testing code. When a module is imported &lt;code&gt;__name__&lt;/code&gt; is the name of the module. When a module python file is executed from the command line &lt;code&gt;__name__&lt;/code&gt; is equal to &lt;code&gt;__main__&lt;/code&gt;. Personally this feels like a bit of a hack to me, since you can use something like say Django's unit testing platform, but it might come handy sometime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Chapter 3 (Native Datatypes)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Here's a cool trick mentioned in this chapter:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MONDAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TUESDAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WEDNESDAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;THURSDAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FRIDAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SATURDAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SUNDAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Chapter 4 (The Power Of Introspection):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Some useful functions are mentioned: &lt;code&gt;dir&lt;/code&gt; (try on a module or an object instance), &lt;code&gt;callable&lt;/code&gt;, &lt;code&gt;getattr&lt;/code&gt;, &lt;code&gt;__doc__&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So you can do something interesting, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Sum:&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;Sums numbers&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;member&lt;/span&gt; = &lt;span class="mi"&gt;3&lt;/span&gt;

  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum2&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;, &lt;span class="n"&gt;b&lt;/span&gt;):
    &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;Sum two numbers&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; + &lt;span class="n"&gt;b&lt;/span&gt;

  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum3&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;, &lt;span class="n"&gt;b&lt;/span&gt;, &lt;span class="n"&gt;c&lt;/span&gt;):
    &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;Sum three numbers&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; + &lt;span class="n"&gt;b&lt;/span&gt; + &lt;span class="n"&gt;c&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; == &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
  &lt;span class="n"&gt;methods&lt;/span&gt; = [&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;(&lt;span class="n"&gt;Sum&lt;/span&gt;) &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;callable&lt;/span&gt;(&lt;span class="n"&gt;getattr&lt;/span&gt;(&lt;span class="n"&gt;Sum&lt;/span&gt;, &lt;span class="n"&gt;f&lt;/span&gt;))]
  &lt;span class="n"&gt;docs&lt;/span&gt; = &lt;span class="s"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;.&lt;span class="nb"&gt;join&lt;/span&gt;([&lt;span class="s"&gt;&amp;quot;%s %s&amp;quot;&lt;/span&gt; % (&lt;span class="n"&gt;f&lt;/span&gt;, &lt;span class="n"&gt;getattr&lt;/span&gt;(&lt;span class="n"&gt;Sum&lt;/span&gt;, &lt;span class="n"&gt;f&lt;/span&gt;).&lt;span class="n"&gt;__doc__&lt;/span&gt;) &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;])
  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;docs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And run it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python ./sum.py
sum2 Sum two numbers
sum3 Sum three numbers
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The "and-or trick"&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;is_mammal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;use_rpc&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;remote_check_is_mammal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_IS_MAMMAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's like &lt;code&gt;?:&lt;/code&gt; in C++. I think I did well with creating a good example here :).&lt;/p&gt;
&lt;h3&gt;Chapter 5 (Objects and Object-Orientation)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var1 is var2&lt;/code&gt; checks for object identity. Here's a good &lt;a href="http://stackoverflow.com/questions/13650293/understanding-pythons-is-operator"&gt;stackoverflow&lt;/a&gt; article that gives examples.&lt;/li&gt;
&lt;li&gt;You can change a class variable using &lt;code&gt;self.__class__.variable_name = new_value&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can create your own dictionary by inheriting from &lt;code&gt;UserDict&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you call &lt;code&gt;x["hello"] = 3&lt;/code&gt;, this calls the &lt;code&gt;__setitem__&lt;/code&gt; method. There are other similar methods, like &lt;code&gt;__getitem__&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Chapter 6 (Exceptions and file handling)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You can use &lt;code&gt;else&lt;/code&gt; in exceptions code. Like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RPC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remote_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RPC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;No such function.&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Function was found.&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Enough lookups.&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;

&lt;span class="n"&gt;find_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;func&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;find_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;remote_call&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python ./ex.py 
No such &lt;span class="k"&gt;function&lt;/span&gt;.
Enough lookups.

Function was found.
Enough lookups.
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;When you open a file, you have a variety of functions and attributes on the file object, like &lt;code&gt;seek&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;mode&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;. For example, to see how big a file is you can just call &lt;code&gt;f.seek(0, 2)&lt;/code&gt; to seek until the end and then &lt;code&gt;f.tell()&lt;/code&gt; to output the number of bytes.&lt;/li&gt;
&lt;li&gt;A class' module is accessible by calling &lt;code&gt;ClassName.__module__&lt;/code&gt;. All imported modules are in the &lt;code&gt;sys.modules&lt;/code&gt; dictionary. Example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sum&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sum&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__module__&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sum&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sum.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__module__&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x109535a10&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Chapter 7 (Regular Expressions)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\\b&lt;/code&gt; matches a word boundary. This can be so useful.&lt;/li&gt;
&lt;li&gt;Verbose regular expressions. Again, very useful. Example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;raw_regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;r&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;  (\d{3})&lt;/span&gt;
&lt;span class="s2"&gt;  \D*&lt;/span&gt;
&lt;span class="s2"&gt;  (\d{3})&lt;/span&gt;
&lt;span class="s2"&gt;  \D*&lt;/span&gt;
&lt;span class="s2"&gt;  (\d{4})&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;examples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;4153125633&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;415-312-5633&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;415 312 5633&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;work 415 312 5633&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;(415) - 312 - 5633&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;1 415 312 5633&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;phone_re&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VERBOSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;phone_re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;415&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;312&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5633&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Why I always use virtualenv to try out new libraries.</title><link href="http://pminkov.github.io/blog/why-i-always-use-virtualenv-to-try-out-new-libraries.html" rel="alternate"></link><published>2016-05-24T18:14:00-07:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-05-24:blog/why-i-always-use-virtualenv-to-try-out-new-libraries.html</id><summary type="html">&lt;p&gt;One thing that I always do with virtualenv is to install new Python libraries in a new virtualenv before I install them into the one I'm currently working with.&lt;/p&gt;
&lt;p&gt;Here's how I do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv venv
New python executable in /Users/petko/work/post/venv/bin/python
Installing setuptools, pip, wheel...done.

$ . ./venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; 

$ pip install cryptography
... lengthy install log ...

$ pip install pipdeptree &lt;span class="c1"&gt;# Awesome tool, more in a bit.&lt;/span&gt;

$ pipdeptree
Warning!!! Possibly conflicting dependencies found:
* &lt;span class="nv"&gt;cryptography&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.3.2
 - setuptools &lt;span class="o"&gt;[&lt;/span&gt;required: &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;11.3, installed: &amp;lt;unknown&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
------------------------------------------------------------------------
&lt;span class="nv"&gt;wheel&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0.26.0
&lt;span class="nv"&gt;wsgiref&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0.1.2
&lt;span class="nv"&gt;cryptography&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.3.2
  - setuptools &lt;span class="o"&gt;[&lt;/span&gt;required: &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;11.3&lt;span class="o"&gt;]&lt;/span&gt;
  - enum34 &lt;span class="o"&gt;[&lt;/span&gt;installed: 1.1.6&lt;span class="o"&gt;]&lt;/span&gt;
  - ipaddress &lt;span class="o"&gt;[&lt;/span&gt;installed: 1.0.16&lt;span class="o"&gt;]&lt;/span&gt;
  - pyasn1 &lt;span class="o"&gt;[&lt;/span&gt;required: &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;0.1.8, installed: 0.1.9&lt;span class="o"&gt;]&lt;/span&gt;
  - six &lt;span class="o"&gt;[&lt;/span&gt;required: &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;1.4.1, installed: 1.10.0&lt;span class="o"&gt;]&lt;/span&gt;
  - idna &lt;span class="o"&gt;[&lt;/span&gt;required: &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;2.0, installed: 2.1&lt;span class="o"&gt;]&lt;/span&gt;
  - cffi &lt;span class="o"&gt;[&lt;/span&gt;required: &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;1.4.1, installed: 1.6.0&lt;span class="o"&gt;]&lt;/span&gt;
    - pycparser &lt;span class="o"&gt;[&lt;/span&gt;installed: 2.14&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it! Now I can experiment with a new library without worrying that it'll pollute my work virtualenv. Another thing that I do is using pipdeptree to see the dependencies that a new library will bring with it. If a library brings in too many dependencies, I'll be thinking twice about my need to use it, or I'll look for alternatives.&lt;/p&gt;</summary></entry><entry><title>Using mustache templates with Django.</title><link href="http://pminkov.github.io/blog/using-mustache-templates-with-django.html" rel="alternate"></link><published>2016-05-23T22:13:00-07:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-05-23:blog/using-mustache-templates-with-django.html</id><summary type="html">&lt;p&gt;There are various reasons why you might want to use client side templates in a Django app. 
For example, you might want to make your initial page load faster, return some of your data in json format and postpone some template rendering until the user needs it.&lt;/p&gt;
&lt;p&gt;Let's see how we can easily include &lt;a href="https://mustache.github.io/"&gt;mustache&lt;/a&gt; templates in Django. &lt;a href="http://mustache.github.io/mustache.5.html"&gt;This&lt;/a&gt; page explains the mustache syntax quite well.&lt;/p&gt;
&lt;p&gt;The most optimized way to include a client side template in your code would be to compile it on deployment and include the compiled JavaScript file as part of your static files.
However, that seemed like too much work and I wanted something that I can implement faster.&lt;/p&gt;
&lt;p&gt;If you're not shipping compiled JavaScript, then your other option would be to have the template text somewhere and compile it client side. I have one main requirement though - I don't want my template code to be in a string which editors will display without HTML syntax highlighting.&lt;/p&gt;
&lt;p&gt;So, working with these constraints, let's see what we can come up with.&lt;/p&gt;
&lt;p&gt;First, let's say our template code is in &lt;code&gt;person.html&lt;/code&gt; and it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  {{#person}}
    The user&amp;#39;s name is {{name}}.
  {{/person}}
  {{^person}}
    There&amp;#39;s no user defined.
  {{/person}}
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we can include this template in the html page returned by our initial page load, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person_template_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sb"&gt;`{% include &amp;quot;myapp/templates/person.html&amp;quot; %}`&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, &lt;code&gt;person_template_text&lt;/code&gt; is a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;template literal&lt;/a&gt;. Template literals are JavaScript strings that can span multiple lines.&lt;/p&gt;
&lt;p&gt;Now, we just need to compile the template so that it's ready to be rendered. We'll use &lt;a href="http://twitter.github.io/hogan.js/"&gt;hogan.js&lt;/a&gt;, since it's advertised as faster and smaller than mustache and it fully supports mustache syntax. Let's say we're also using jQuery. We can do something along these lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;person_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Hogan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person_template_text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;personDict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;person_template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;personDict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's it. There are many other ways to do this, which will be more optimized, but this one seems like an easy one to start with.&lt;/p&gt;</summary><category term="Python"></category><category term="Django"></category></entry><entry><title>Type checking in Python?</title><link href="http://pminkov.github.io/blog/type-checking-in-python.html" rel="alternate"></link><published>2016-05-18T10:39:00-07:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-05-18:blog/type-checking-in-python.html</id><summary type="html">&lt;p&gt;Since Python is a dynamically typed language, it doesn't offer type checking out of the box. There are workarounds around this though.
One that I use in my projects is the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;) &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; != &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's an example of how to use this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's say that you call the function incorrectly, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll get the following exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sum(a, b)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 2, in sum
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 2, in T
AssertionError: (hello) &amp;lt;type &amp;#39;str&amp;#39;&amp;gt; != &amp;lt;type &amp;#39;int&amp;#39;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So that's it - pretty simple. I use the &lt;code&gt;T&lt;/code&gt; function every once in a while, to guard against type errors.&lt;/p&gt;</summary></entry><entry><title>How much does it cost to run a Django app on AWS using Elastic Beanstalk?</title><link href="http://pminkov.github.io/blog/how-much-does-it-cost-to-run-a-django-app-on-aws-using-elastic-beanstalk.html" rel="alternate"></link><published>2016-04-20T13:56:00-07:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-04-20:blog/how-much-does-it-cost-to-run-a-django-app-on-aws-using-elastic-beanstalk.html</id><summary type="html">&lt;p&gt;I've been running a Django app on &lt;a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-django.html"&gt;Elastic Beanstalk&lt;/a&gt; for a couple of months and I have a decent idea now of the costs involved and the pros and cons of this approach. My goal was to get something going as soon as possible and I'd say Elastic Beanstalk is good for that purpose. There are a few things that took me more time to figure out and I might write about them too, but overall everything is running smoothly now.&lt;/p&gt;
&lt;p&gt;Let's first describe what my setup is. Elastic Beanstalk is AWS's PaaS offering. I use a MySQL database running on RDS, a load balancer, a single EC2 instance and I have a DNS setup on Route 53. And that's more or less what I'm paying for. My bill was &lt;strong&gt;$42.58&lt;/strong&gt; last month. Breaking it down, here are the three major components it has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;EC2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm running a &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/t2-instances.html"&gt;t2.micro&lt;/a&gt; instance. It costs $0.013 per hour and I paid for 745 hours. Total: &lt;strong&gt;$9.69&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Load balancing&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Load balancing is not cheap. It costs $0.025 per hour and for 744 hours shown, that comes down to &lt;strong&gt;$18.60&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RDS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RDS costs $0.017 per RDS T2 Micro instance hour and for 743 hours shown, I paid &lt;strong&gt;$12.63&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If we sum these three, it comes down to &lt;strong&gt;$40.92&lt;/strong&gt;. I also paid the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$0.56 for RDS service storage.&lt;/li&gt;
&lt;li&gt;$0.45 for &lt;a href="https://aws.amazon.com/ebs/"&gt;EBS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;$0.51 for Route 53.&lt;/li&gt;
&lt;li&gt;$0.07 for data transfer (my site being served to places around the world, but my site is not popular yet).&lt;/li&gt;
&lt;li&gt;$0.05 for S3 costs.&lt;/li&gt;
&lt;li&gt;$0.01 for data processed by the load balancer.&lt;/li&gt;
&lt;li&gt;$0.01 for SES.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are minimal costs. Some of these are going to increase if my site becomes popular, but right now they are minimal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How can I bring these costs down?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's possible to do all of this with a single EC2 instance and avoid paying for load balancing and RDS. What I get from these components right now is convenience and scalability. I don't really need scalability, since I don't operate at scale and might not come to that point. Convenience can be traded for the learning experience of settings up things manually. AWS has an &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-LAMP.html"&gt;article&lt;/a&gt; on how to install a LAMP setup on EC2. It doesn't look too complicated. Supposedly my bill will be around $10 per month for my 1GB RAM t2.micro machine.&lt;/p&gt;
&lt;p&gt;Another option would be to use &lt;a href="https://www.digitalocean.com/pricing/"&gt;Digital Ocean&lt;/a&gt;. They're basically offering something similar to EC2 instances, but I haven't looked too much in detail. Digital Ocean is an IaaS provider, you need to do some manual setup. Their cost is pretty similar. An offering with 1GB of RAM costs $10 per month too. That's a very rough comparison, but it seems like we're in the same ballpark if we're not pushing the limits on disk space or bandwidth.&lt;/p&gt;
&lt;p&gt;It should also be possibe to continue to use Elastic Beanstalk, but run a MySQL server directly on the EC2 instance. Here's a long &lt;a href="http://d0.awsstatic.com/whitepapers/rdbms-in-the-cloud-sql-server-on-aws.pdf"&gt;white paper&lt;/a&gt; that talks about this.&lt;/p&gt;</summary><category term="AWS"></category><category term="Elastic Beanstalk"></category><category term="Python"></category><category term="Django"></category></entry><entry><title>How to generate user activation links in Django.</title><link href="http://pminkov.github.io/blog/how-to-generate-user-activation-links-in-django.html" rel="alternate"></link><published>2016-04-05T17:03:00-07:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2016-04-05:blog/how-to-generate-user-activation-links-in-django.html</id><summary type="html">&lt;p&gt;Imagine the following simple user registration flow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User registers by setting an e-mail and a password.&lt;/li&gt;
&lt;li&gt;The server sends an e-mail containing an activation link to the user.&lt;/li&gt;
&lt;li&gt;The user clicks on the activation link and activates their account.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's focus on step 2. How do we generate this activation link?&lt;/p&gt;
&lt;p&gt;One way to implement this is to generate single use tokens and save them in a database table. Our url then looks like &lt;code&gt;http://sitename.com/activate?token=mytoken&lt;/code&gt;. That solution has the benefit of being able to track that a token has been used and enforce single use. The drawback is that you need a new database table, which I wanted to avoid.&lt;/p&gt;
&lt;p&gt;How else can we generate these tokens?&lt;/p&gt;
&lt;p&gt;My first hunch was to reuse Django's &lt;a href="https://github.com/django/django/blob/master/django/contrib/auth/tokens.py"&gt;PasswordResetTokenGenerator&lt;/a&gt;. However, notice that the &lt;code&gt;check_token&lt;/code&gt; function requires a user. This means that the activation link needs to include information about who the user is. So our &lt;code&gt;/activate&lt;/code&gt; link will need to include an url parameter that's either the username, user id, or something else that uniquely identifies a user. I'm not happy with that. This is a link that's supposed to be private and I don't want the user's first impression of my site to be that I'm including their user id in an activation link, when most other sites don't do that.&lt;/p&gt;
&lt;p&gt;The solution that I settled on was encrypting the user id on the server. I'm generating a link of the form &lt;code&gt;http://sitename.com/activate?token=mytoken&lt;/code&gt;. I generate the token using the Python &lt;a href="https://pypi.python.org/pypi/cryptography"&gt;cryptography&lt;/a&gt; package. The token is created by encrypting the username with a salt.&lt;/p&gt;
&lt;p&gt;So why is this not what Django is doing? I suppose the answer is that Python doesn't have a symmetric encryption implementation library coming with it.&lt;/p&gt;
&lt;p&gt;In addition, I also wanted the tokens to expire. This is simple, we can just include a timestamp in the token and compare it against the current time upon decryption.&lt;/p&gt;
&lt;p&gt;Here's a sample class that implements all of this:&lt;/p&gt;
&lt;script src="https://gist.github.com/pminkov/e53d90c348f1dc47553408666431d2a2.js"&gt;&lt;/script&gt;</summary></entry><entry><title>Plotting in Octave.</title><link href="http://pminkov.github.io/blog/plotting-in-octave.html" rel="alternate"></link><published>2012-07-29T22:33:00-07:00</published><author><name>softwarecomments</name></author><id>tag:pminkov.github.io,2012-07-29:blog/plotting-in-octave.html</id><summary type="html">&lt;p&gt;Plotting functions in Octave is quite easy and helpful.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
In the lecture on neural networks from Stanford's
&lt;a href="http://ml-class.org/"&gt;machine learning class&lt;/a&gt; a function related to neural
networks is introduced. The function has two inputs - x1 and x2 and it's
supposed to model a logical AND operation. The function is based on the
sigmoid function.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
The sigmoid function looks like this:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Google sigmoid plot" src="http://pminkov.github.io/blog/images/sigmoid-google.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
Computing the sigmoid function in Octave can be seen
&lt;a href="https://gist.github.com/3205075" title="Sidmoid"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
The given example plugs x1 and x2 into the sigmoid function by
computing:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
f(x1, x2) = sigmoid(-30 + 20*x1 + 20*x2)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
f(1, 1) evaluates to 1&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
f(0, 0), f(0, 1) and f(1, 0) evaluate to 0.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
Intuitively that make sense. Even if x1 or x2 is 1, -30 + 20 is -10,
which corresponds to a very low value for the sigmoid function, as you
can see from the graph above.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
I got curious about how this function looks like for values between zero
and one and wrote this &lt;a href="https://gist.github.com/3205016"&gt;short Octave
program&lt;/a&gt; to plot the output. And here
it is. Pretty neat, I'd say.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Octave sigmoid plot" src="http://pminkov.github.io/blog/images/sigmoid-octave.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
It's easy to see that the function behaves as expected at (0,0), (0,1)
and (1,0) and (1,1) and that for values in between its computed values
are somewhere in between as well.&lt;/p&gt;
&lt;/p&gt;</summary></entry><entry><title>Stanford's machine learning class.</title><link href="http://pminkov.github.io/blog/stanfords-machine-learning-class.html" rel="alternate"></link><published>2012-07-27T15:00:45-07:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2012-07-27:blog/stanfords-machine-learning-class.html</id><summary type="html">&lt;p&gt;Stanford's machine learning class on coursera is pretty good. What's
surprising to me is that exercises take much more time than listening to
lectures and taking after class quizes.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
The programming environment used for the class is Octave. The most
challenging part so far with writing code in Octave is coming up with
what's called vectorization solutions. The idea of vectorization is that
instead of writing loops, you compute values by vector and matrix
operations.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
Let's look at a simple example. Imagine that you have a vector of zeros
and ones. You have to convert it to a vector where for each one we have
a one and for each zero we have minus one. That came up as a component
of the cost function computation in logistic regression.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
An iterative solution in Scala might look like this:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
v.map(x =&amp;gt; if (x == 0) -1 else 1)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
How would that look in Octave if we can't use loops and if statements? A
function F that maps from {0, 1} to {-1, 1} actually looks like this:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
F(x) = 2x - 1&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
Pretty cool. Now if our vector of zeros and ones is A, by using that
function, we can compute the desired value by doing this:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
D = 2 * A - 1&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
This is pretty much only a part of a typical vectorized computation in
machine learning. Crafting those takes some time, but at the end there's
a good a-ha moment and usually a quite short solution.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
So far I went through the linear and logistic regression lectures. Both
methods are widely practical and it's very easy to come up with usage
example. Those methods are examples of supervised learning algorithms,
since we train them on a data set and then once we've computed a model
we just plug new examples into it and come up with results.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
In practice, I doubt that anyone is going to implement their own
gradient descent algorithms to come up with model coefficients. I'd
expect that usually a library / package like Matlab / Octave / R will be
used to train a model. Implementing the model itself is quite trivial
and would be just a couple of lines of code.&lt;/p&gt;
&lt;/p&gt;</summary></entry><entry><title>Scala scopes.</title><link href="http://pminkov.github.io/blog/scala-scopes.html" rel="alternate"></link><published>2012-04-27T23:26:00-07:00</published><author><name>softwarecomments</name></author><id>tag:pminkov.github.io,2012-04-27:blog/scala-scopes.html</id><summary type="html">&lt;p&gt;After some programming with Scala, there are a couple of language
features which I really like. One of them is scopes that can evaluate to
a value. How does that look like:&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gist.github.com/2516506.js" type="text/javascript"&gt;&lt;![CDATA[// &lt;![CDATA[&lt;/p&gt;

&lt;p&gt;// &lt;![CDATA[&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;// ]]]]]]&gt;&lt;![CDATA[&gt;&lt;![CDATA[&gt;&lt;/p&gt;

&lt;p&gt;// ]]]]&gt;&lt;![CDATA[&gt;]]&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
Ignore the obvious inefficiencies of the code and take a look at how you
can put a block of code inside the inner scope. What's good about that?
This inner scope is like a lighweight function. The benefits are:&lt;/p&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Variables in the function are not seen outside of the scope. Great,
    because you'll get a compile error if you try to use one of
    those variables. Once you're working in the scope you know that any
    variable you declare inside of it won't be used on the outside.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have a logical block of computation that has a clear start and
    finish, which makes the code easier to read and work with.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlike a function, you don't need to declare function parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The drawback is of course that this can become an excuse for creating
long functions, with a lot of scopes like this one inside of them. If
that's avoided, this language feature leads to easier to understand
code.&lt;/p&gt;
&lt;/p&gt;</summary></entry><entry><title>Fun problem with Scala.</title><link href="http://pminkov.github.io/blog/fun-problem-with-scala.html" rel="alternate"></link><published>2012-03-06T23:28:00-08:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2012-03-06:blog/fun-problem-with-scala.html</id><summary type="html">&lt;p&gt;Here's a fun problem to solve with Scala.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
Given N lists, dedupe them with the following rules. Go through the
first list, dedupe it. Go through every consecutive list and only leave
items which are not in a previous list and also take care of removing
duplicates.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
The challenge here is to do this without using vars and by only using
vals. If you use vars, the solution is trivial.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
The solution to this problem is using foldLeft. foldLeft essentially
gives you a way to operate on the elements of a list while aggregating
some state. The state you aggregate is the elements you've already seen
and the current result. The final solution looks like this:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gist.github.com/1991619.js" type="text/javascript"&gt;&amp;lt;![CDATA[// &amp;lt;![CDATA[&lt;/p&gt;&lt;p&gt;// &amp;lt;![CDATA[&lt;/p&gt;&lt;p&gt;// &amp;lt;![CDATA[&lt;/p&gt;&lt;p&gt;// &amp;lt;![CDATA[&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;// ]]]]]]]]]]&amp;gt;&amp;lt;![CDATA[&amp;gt;&amp;lt;![CDATA[&amp;gt;&amp;lt;![CDATA[&amp;gt;&amp;lt;![CDATA[&amp;gt;&lt;/p&gt;&lt;p&gt;// ]]]]]]]]&amp;gt;&amp;lt;![CDATA[&amp;gt;&amp;lt;![CDATA[&amp;gt;&amp;lt;![CDATA[&amp;gt;&lt;/p&gt;&lt;p&gt;// ]]]]]]&amp;gt;&amp;lt;![CDATA[&amp;gt;&amp;lt;![CDATA[&amp;gt;&lt;/p&gt;&lt;p&gt;// ]]]]&amp;gt;&amp;lt;![CDATA[&amp;gt;]]&amp;gt;&lt;/script&gt;
&lt;/p&gt;
&lt;/p&gt;
And while we're at it, let's see how the C++ solution looks like, for
comparison. My C++ might be a bit rusty, but the result is longer.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gist.github.com/1991674.js" type="text/javascript"&gt;&amp;lt;![CDATA[// &amp;lt;![CDATA[&lt;/p&gt;&lt;p&gt;// &amp;lt;![CDATA[&lt;/p&gt;&lt;p&gt;// &amp;lt;![CDATA[&lt;/p&gt;&lt;p&gt;// &amp;lt;![CDATA[&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;// ]]]]]]]]]]&amp;gt;&amp;lt;![CDATA[&amp;gt;&amp;lt;![CDATA[&amp;gt;&amp;lt;![CDATA[&amp;gt;&amp;lt;![CDATA[&amp;gt;&lt;/p&gt;&lt;p&gt;// ]]]]]]]]&amp;gt;&amp;lt;![CDATA[&amp;gt;&amp;lt;![CDATA[&amp;gt;&amp;lt;![CDATA[&amp;gt;&lt;/p&gt;&lt;p&gt;// ]]]]]]&amp;gt;&amp;lt;![CDATA[&amp;gt;&amp;lt;![CDATA[&amp;gt;&lt;/p&gt;&lt;p&gt;// ]]]]&amp;gt;&amp;lt;![CDATA[&amp;gt;]]&amp;gt;&lt;/script&gt;
&lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;</summary></entry><entry><title>Simulating HTTP responses in Django.</title><link href="http://pminkov.github.io/blog/simulating-http-responses-in-django.html" rel="alternate"></link><published>2011-11-11T19:15:00-08:00</published><author><name>Petko Minkov</name></author><id>tag:pminkov.github.io,2011-11-11:blog/simulating-http-responses-in-django.html</id><summary type="html">&lt;p&gt;One of the most important aspects of your web application's client side
code is how it handles errors and slow connections. In the case of an
error, some reasonable error message should be displayed and in the case
of a slow connection, the user shouldn't be left staring at the web app
wondering why did it freeze and you should at least display a spinning
wheel or some other "in progress" indicator.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
To solve that problem in Django, you can write a simple Django
application that simulates errors and slow connections. The way it works
is by installing a middleware component that catches HTTP requests and
returns error codes, or sleeps for some time before returning.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
I'll illustrate how to implement a very simple version of that idea.
Let's say that you'll have a handler sitting at "/http_simulate", which
when accessed will switch the server from error mode to healthy mode and
then back. The second thing you need is a middleware that knows what
mode the server is in and depending on that, fiddles with the HTTP
request and produces an error HTTP response.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
Here's how a very simple middleware class would look like:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gist.github.com/1359978.js"&gt; &lt;/script&gt;
Notice how that middleware class ignores requests which go to the view
that switches to error mode. You want to be able to switch back to
normal mode once you switch to error mode.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
The second part you need is a view that switches the &lt;code&gt;IN_ERROR_MODE&lt;/code&gt;
variable.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gist.github.com/1359984.js"&gt; &lt;/script&gt;
After you have this code, you can just create a simple Django
application and install that middleware in your settings.py file. Be
careful to not have that turned on in your production environment.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
There are also many ways in which this can be extended:&lt;/p&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for different error codes.&lt;/li&gt;
&lt;li&gt;Support for slow connections by sleeping before sending the
    HTTP response.&lt;/li&gt;
&lt;li&gt;Setting error mode for only specific urls, not for every request
    sent to the server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;</summary></entry></feed>